{
  "paths": [
    {
      "type": "dir",
      "name": "en",
      "children": [
        {
          "type": "file",
          "value": "en/extending.md"
        },
        {
          "type": "file",
          "value": "en/html-id.md"
        },
        {
          "type": "file",
          "value": "en/index.md"
        },
        {
          "type": "file",
          "value": "en/link-icon.md"
        },
        {
          "type": "file",
          "value": "en/link-types.md"
        },
        {
          "type": "file",
          "value": "en/string-manipulation.md"
        },
        {
          "type": "file",
          "value": "en/templating-styling.md"
        },
        {
          "type": "file",
          "value": "en/usage.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "en/extending.md",
      "url": "en/extending.html",
      "content": "---\ntitle: Extending\n---\n\n## Adding custom link types\n\nSometimes you might have custom DataObject types that you would like CMS users to be able to create Links to. This can be achieved by adding a DataExtension to the Link DataObject, see the below example for making Product objects Linkable.\n\n```php\n\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\DropdownField;\nuse SilverStripe\\ORM\\DataExtension;\nuse UncleCheese\\DisplayLogic\\Forms\\Wrapper;\n\nclass CustomLinkExtension extends DataExtension\n{\n    private static $has_one = [\n        'Product' => 'Product',\n    ];\n\n    /**\n     * A map of object types that can be linked to\n     * Custom dataobjects can be added to this\n     *\n     * @var array\n     **/\n    private static $types = [\n        'Product' => 'A Product on this site',\n    ];\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        // Add a dropdown field containing your ProductList\n        $fields->addFieldToTab(\n            'Root.Main',\n            Wrapper::create(\n                DropdownField::create(\n                    'ProductID',\n                    'Product',\n                    Product::get()->map('ID', 'Title')->toArray()\n                )\n                ->setHasEmptyDefault(true)\n            )->displayIf('Type')->isEqualTo('Product')->end()\n        );\n    }\n\n    /**\n     * Update LinkURL\n     */\n    public function updateLinkURL(&$linkURL)\n    {\n        $owner = $this->owner;\n        if ($owner->Type == 'Product') {\n            $linkURL = ''; // Product url\n        }\n    }\n```\n\nIn your config.yml\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  extensions:\n    - CustomLinkExtension\n```\n\n## Working examples\n\nThe following modules enhance link but can also be used as working examples for what is possible.\n\n-   [Add security link types](https://github.com/gorriecoe/silverstripe-securitylinks)\n-   [Add directions link type](https://github.com/gorriecoe/silverstripe-directionslink)\n-   [Add additional email options to email type](https://github.com/gorriecoe/silverstripe-advancedemaillinks)\n-   [Add an icon to link output](https://github.com/gorriecoe/silverstripe-linkicon)\n-   [Add preset link types from your config yml](https://github.com/gorriecoe/silverstripe-ymlpresetlinks)\n",
      "html": "<hr>\n<h2 id=\"title%3A-extending\">title: Extending <a class=\"heading-anchor-permalink\" href=\"#title%3A-extending\">#</a></h2>\n<h2 id=\"adding-custom-link-types\">Adding custom link types <a class=\"heading-anchor-permalink\" href=\"#adding-custom-link-types\">#</a></h2>\n<p>Sometimes you might have custom DataObject types that you would like CMS users to be able to create Links to. This can be achieved by adding a DataExtension to the Link DataObject, see the below example for making Product objects Linkable.</p>\n<pre><code class=\"language-php\">\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\DropdownField;\nuse SilverStripe\\ORM\\DataExtension;\nuse UncleCheese\\DisplayLogic\\Forms\\Wrapper;\n\nclass CustomLinkExtension extends DataExtension\n{\n    private static $has_one = [\n        'Product' =&gt; 'Product',\n    ];\n\n    /**\n     * A map of object types that can be linked to\n     * Custom dataobjects can be added to this\n     *\n     * @var array\n     **/\n    private static $types = [\n        'Product' =&gt; 'A Product on this site',\n    ];\n\n    public function updateCMSFields(FieldList $fields)\n    {\n        // Add a dropdown field containing your ProductList\n        $fields-&gt;addFieldToTab(\n            'Root.Main',\n            Wrapper::create(\n                DropdownField::create(\n                    'ProductID',\n                    'Product',\n                    Product::get()-&gt;map('ID', 'Title')-&gt;toArray()\n                )\n                -&gt;setHasEmptyDefault(true)\n            )-&gt;displayIf('Type')-&gt;isEqualTo('Product')-&gt;end()\n        );\n    }\n\n    /**\n     * Update LinkURL\n     */\n    public function updateLinkURL(&amp;$linkURL)\n    {\n        $owner = $this-&gt;owner;\n        if ($owner-&gt;Type == 'Product') {\n            $linkURL = ''; // Product url\n        }\n    }\n</code></pre>\n<p>In your config.yml</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  extensions:\n    - CustomLinkExtension\n</code></pre>\n<h2 id=\"working-examples\">Working examples <a class=\"heading-anchor-permalink\" href=\"#working-examples\">#</a></h2>\n<p>The following modules enhance link but can also be used as working examples for what is possible.</p>\n<ul>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-securitylinks\">Add security link types</a></li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-directionslink\">Add directions link type</a></li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-advancedemaillinks\">Add additional email options to email type</a></li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-linkicon\">Add an icon to link output</a></li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-ymlpresetlinks\">Add preset link types from your config yml</a></li>\n</ul>\n",
      "id": 0
    },
    {
      "path": "en/html-id.md",
      "url": "en/html-id.html",
      "content": "---\ntitle: Html ID attribute\n---\n\n## Add html id attribute\n\nLink has 3 options for defining html id, automatic, define-able or both.\n\nTo apply automatic id's add the following to your config.\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\AutomaticMarkupID\n```\n\nTo apply input defineable id's add the following to your config.\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\DefineableMarkupID\n```\n\nTo apply both automatic and define-able add the following to your config,\nensuring the order is correct\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\AutomaticMarkupID\n    - gorriecoe\\Link\\Extensions\\DefineableMarkupID\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-html-id-attribute\">title: Html ID attribute <a class=\"heading-anchor-permalink\" href=\"#title%3A-html-id-attribute\">#</a></h2>\n<h2 id=\"add-html-id-attribute\">Add html id attribute <a class=\"heading-anchor-permalink\" href=\"#add-html-id-attribute\">#</a></h2>\n<p>Link has 3 options for defining html id, automatic, define-able or both.</p>\n<p>To apply automatic id’s add the following to your config.</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\AutomaticMarkupID\n</code></pre>\n<p>To apply input defineable id’s add the following to your config.</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\DefineableMarkupID\n</code></pre>\n<p>To apply both automatic and define-able add the following to your config,\nensuring the order is correct</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  extensions:\n    - gorriecoe\\Link\\Extensions\\AutomaticMarkupID\n    - gorriecoe\\Link\\Extensions\\DefineableMarkupID\n</code></pre>\n",
      "id": 1
    },
    {
      "path": "en/index.md",
      "url": "en/index.html",
      "content": "---\ntitle: Silverstripe link\n---\n\n# Installation\n\n## Requirements\n\n-   [silverstripe/framework](enhttps://github.com/silverstripe/silverstripe-framework) ^4.0\n-   [unclecheese/display-logic](https://github.com/unclecheese/silverstripe-display-logic) ^2.0\n-   [giggsey/libphonenumber-for-php](https://github.com/giggsey/libphonenumber-for-php) ^8.0\n\n## Installing silverstripe link\n\nFirst download silverstripe link using composer command in your project root:\n\n```\ncomposer require gorriecoe/silverstripe-link\n```\n\n### Migration\n\nIf you are migrating from [Linkable](https://github.com/sheadawson/silverstripe-linkable) checkout [Link migrator](https://github.com/dynamic/silverstripe-link-migrator) from dynamic.\n\n## Contents\n\n-   [Usage](usage)\n    -   [Has one](usage#has-one-example)\n    -   [Many many](usage#many-many-example)\n    -   [Has many](usage#has-many-example)\n-   [Link types](link-types)\n-   [Templating and styling](templating-styling)\n-   [Html ID attribute](html-id)\n-   [Add an icon](link-icon)\n    -   [Icon only output](link-icon#link-icon-only)\n-   [DBString manipulation](string-manipulation)\n    -   [Phone number output](string-manipulation#phonefriendly)\n    -   [Link/anchor friendly output](string-manipulation#linkfriendly)\n-   [Extending](extending)\n-   [Embed](#embed)\n-   [Other module suggestions](#other-module-suggestions)\n\n### Embed\n\nIf you are coming from [Linkable](https://github.com/sheadawson/silverstripe-linkable) and are looking for Embed functionality check out [silverstripe-embed](https://github.com/gorriecoe/silverstripe-embed)\n\n### Other module suggestions\n\n-   [gorriecoe/silverstripe-linkfield](https://github.com/gorriecoe/silverstripe-linkfield).\n-   [silvershop/silverstripe-hasonefield](https://github.com/silvershop/silverstripe-hasonefield).\n-   [gorriecoe/silverstripe-menu](https://github.com/gorriecoe/silverstripe-menu). Adds multiple menus that are defined via yml and managed via the cms.\n-   [nglasl/silverstripe-misdirection](https://github.com/nglasl/silverstripe-misdirection).  Allows both simple and regular expression link redirections based on customisable mappings, either hooking into a page not found or replacing the default automated URL handling.\n-   [gorriecoe/silverstripe-securitylinks](https://github.com/gorriecoe/silverstripe-securitylinks). Add security link types\n-   [gorriecoe/silverstripe-directionslink](https://github.com/gorriecoe/silverstripe-directionslink). Add directions link type\n-   [gorriecoe/silverstripe-advancedemaillinks](https://github.com/gorriecoe/silverstripe-advancedemaillinks). Add additional email options to email type\n-   [gorriecoe/silverstripe-linkicon](https://github.com/gorriecoe/silverstripe-linkicon). Add an icon to link output\n-   [gorriecoe/silverstripe-ymlpresetlinks](https://github.com/gorriecoe/silverstripe-ymlpresetlinks). Add preset link types from your config yml\n-   [gorriecoe/silverstripe-shorturl](https://github.com/gorriecoe/silverstripe-shorturl).  Provides an admin area to create and manage shortURLS.\n",
      "html": "<hr>\n<h2 id=\"title%3A-silverstripe-link\">title: Silverstripe link <a class=\"heading-anchor-permalink\" href=\"#title%3A-silverstripe-link\">#</a></h2>\n<h1 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h1>\n<h2 id=\"requirements\">Requirements <a class=\"heading-anchor-permalink\" href=\"#requirements\">#</a></h2>\n<ul>\n<li><a href=\"enhttps://github.com/silverstripe/silverstripe-framework\">silverstripe/framework</a> ^4.0</li>\n<li><a href=\"https://github.com/unclecheese/silverstripe-display-logic\">unclecheese/display-logic</a> ^2.0</li>\n<li><a href=\"https://github.com/giggsey/libphonenumber-for-php\">giggsey/libphonenumber-for-php</a> ^8.0</li>\n</ul>\n<h2 id=\"installing-silverstripe-link\">Installing silverstripe link <a class=\"heading-anchor-permalink\" href=\"#installing-silverstripe-link\">#</a></h2>\n<p>First download silverstripe link using composer command in your project root:</p>\n<pre><code>composer require gorriecoe/silverstripe-link\n</code></pre>\n<h3 id=\"migration\">Migration <a class=\"heading-anchor-permalink\" href=\"#migration\">#</a></h3>\n<p>If you are migrating from <a href=\"https://github.com/sheadawson/silverstripe-linkable\">Linkable</a> checkout <a href=\"https://github.com/dynamic/silverstripe-link-migrator\">Link migrator</a> from dynamic.</p>\n<h2 id=\"contents\">Contents <a class=\"heading-anchor-permalink\" href=\"#contents\">#</a></h2>\n<ul>\n<li><a href=\"usage\">Usage</a>\n<ul>\n<li><a href=\"usage#has-one-example\">Has one</a></li>\n<li><a href=\"usage#many-many-example\">Many many</a></li>\n<li><a href=\"usage#has-many-example\">Has many</a></li>\n</ul>\n</li>\n<li><a href=\"link-types\">Link types</a></li>\n<li><a href=\"templating-styling\">Templating and styling</a></li>\n<li><a href=\"html-id\">Html ID attribute</a></li>\n<li><a href=\"link-icon\">Add an icon</a>\n<ul>\n<li><a href=\"link-icon#link-icon-only\">Icon only output</a></li>\n</ul>\n</li>\n<li><a href=\"string-manipulation\">DBString manipulation</a>\n<ul>\n<li><a href=\"string-manipulation#phonefriendly\">Phone number output</a></li>\n<li><a href=\"string-manipulation#linkfriendly\">Link/anchor friendly output</a></li>\n</ul>\n</li>\n<li><a href=\"extending\">Extending</a></li>\n<li><a href=\"#embed\">Embed</a></li>\n<li><a href=\"#other-module-suggestions\">Other module suggestions</a></li>\n</ul>\n<h3 id=\"embed\">Embed <a class=\"heading-anchor-permalink\" href=\"#embed\">#</a></h3>\n<p>If you are coming from <a href=\"https://github.com/sheadawson/silverstripe-linkable\">Linkable</a> and are looking for Embed functionality check out <a href=\"https://github.com/gorriecoe/silverstripe-embed\">silverstripe-embed</a></p>\n<h3 id=\"other-module-suggestions\">Other module suggestions <a class=\"heading-anchor-permalink\" href=\"#other-module-suggestions\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-linkfield\">gorriecoe/silverstripe-linkfield</a>.</li>\n<li><a href=\"https://github.com/silvershop/silverstripe-hasonefield\">silvershop/silverstripe-hasonefield</a>.</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-menu\">gorriecoe/silverstripe-menu</a>. Adds multiple menus that are defined via yml and managed via the cms.</li>\n<li><a href=\"https://github.com/nglasl/silverstripe-misdirection\">nglasl/silverstripe-misdirection</a>.  Allows both simple and regular expression link redirections based on customisable mappings, either hooking into a page not found or replacing the default automated URL handling.</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-securitylinks\">gorriecoe/silverstripe-securitylinks</a>. Add security link types</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-directionslink\">gorriecoe/silverstripe-directionslink</a>. Add directions link type</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-advancedemaillinks\">gorriecoe/silverstripe-advancedemaillinks</a>. Add additional email options to email type</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-linkicon\">gorriecoe/silverstripe-linkicon</a>. Add an icon to link output</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-ymlpresetlinks\">gorriecoe/silverstripe-ymlpresetlinks</a>. Add preset link types from your config yml</li>\n<li><a href=\"https://github.com/gorriecoe/silverstripe-shorturl\">gorriecoe/silverstripe-shorturl</a>.  Provides an admin area to create and manage shortURLS.</li>\n</ul>\n",
      "id": 2
    },
    {
      "path": "en/link-icon.md",
      "url": "en/link-icon.html",
      "content": "---\ntitle: Link icon\n---\n\n## Installation\n\nTo add icons to links you can either make your own [extension](extending) or install [silverstripe-linkicon](https://github.com/gorriecoe/silverstripe-linkicon) with the following:\n\n```\ncomposer require gorriecoe/silverstripe-linkicon\n```\n\n## Template\n\nAdd `$Icon` to your `Link.ss` file.\n```\n<% if LinkURL %>\n    <a{$IDAttr}{$ClassAttr} href=\"{$LinkURL}\"{$TargetAttr}>\n        {$Icon}{$Title}\n    </a>\n<% end_if %>\n```\n\n### Options\n\n#### Define folder\n\nDefine folder to store the icons assets into.\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  icon_asset_folder: 'SomeFolderName' // Defaults to 'Icons'\n```\n\n#### Define tab\n\nDefines tab to insert the icon_folder fields into.\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  icon_tab: 'SomeTabName' // Defaults to 'Settings'\n```\n\n#### Define allowed file extensions\n\nDefines the allowed file extensions for the icon field.\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  icon_allowed_extensions:\n    - 'gif'\n    - 'jpeg'\n    - 'jpg'\n    - 'png'\n    - 'bmp'\n    - 'ico'\n```\n\n## Link icon only\n\nBelow is step by step instructions to setup icon only links.\n\n```\ncomposer require gorriecoe/silverstripe-linkicon\n```\n\nIn your config.yml add the following:\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  styles:\n    icononly: Icon only\n```\n\nCreate a `Link_icononly.ss` file in your theme includes directory with the following:\n\n```\n<% if LinkURL %>\n    <a{$IDAttr}{$ClassAttr} href=\"{$LinkURL}\"{$TargetAttr}>\n        <img src=\"{$Icon.Link}\" alt=\"{$Title}\" />\n    </a>\n<% end_if %>\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-link-icon\">title: Link icon <a class=\"heading-anchor-permalink\" href=\"#title%3A-link-icon\">#</a></h2>\n<h2 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h2>\n<p>To add icons to links you can either make your own <a href=\"extending\">extension</a> or install <a href=\"https://github.com/gorriecoe/silverstripe-linkicon\">silverstripe-linkicon</a> with the following:</p>\n<pre><code>composer require gorriecoe/silverstripe-linkicon\n</code></pre>\n<h2 id=\"template\">Template <a class=\"heading-anchor-permalink\" href=\"#template\">#</a></h2>\n<p>Add <code>$Icon</code> to your <code>Link.ss</code> file.</p>\n<pre><code>&lt;% if LinkURL %&gt;\n    &lt;a{$IDAttr}{$ClassAttr} href=&quot;{$LinkURL}&quot;{$TargetAttr}&gt;\n        {$Icon}{$Title}\n    &lt;/a&gt;\n&lt;% end_if %&gt;\n</code></pre>\n<h3 id=\"options\">Options <a class=\"heading-anchor-permalink\" href=\"#options\">#</a></h3>\n<h4 id=\"define-folder\">Define folder <a class=\"heading-anchor-permalink\" href=\"#define-folder\">#</a></h4>\n<p>Define folder to store the icons assets into.</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  icon_asset_folder: 'SomeFolderName' // Defaults to 'Icons'\n</code></pre>\n<h4 id=\"define-tab\">Define tab <a class=\"heading-anchor-permalink\" href=\"#define-tab\">#</a></h4>\n<p>Defines tab to insert the icon_folder fields into.</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  icon_tab: 'SomeTabName' // Defaults to 'Settings'\n</code></pre>\n<h4 id=\"define-allowed-file-extensions\">Define allowed file extensions <a class=\"heading-anchor-permalink\" href=\"#define-allowed-file-extensions\">#</a></h4>\n<p>Defines the allowed file extensions for the icon field.</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  icon_allowed_extensions:\n    - 'gif'\n    - 'jpeg'\n    - 'jpg'\n    - 'png'\n    - 'bmp'\n    - 'ico'\n</code></pre>\n<h2 id=\"link-icon-only\">Link icon only <a class=\"heading-anchor-permalink\" href=\"#link-icon-only\">#</a></h2>\n<p>Below is step by step instructions to setup icon only links.</p>\n<pre><code>composer require gorriecoe/silverstripe-linkicon\n</code></pre>\n<p>In your config.yml add the following:</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  styles:\n    icononly: Icon only\n</code></pre>\n<p>Create a <code>Link_icononly.ss</code> file in your theme includes directory with the following:</p>\n<pre><code>&lt;% if LinkURL %&gt;\n    &lt;a{$IDAttr}{$ClassAttr} href=&quot;{$LinkURL}&quot;{$TargetAttr}&gt;\n        &lt;img src=&quot;{$Icon.Link}&quot; alt=&quot;{$Title}&quot; /&gt;\n    &lt;/a&gt;\n&lt;% end_if %&gt;\n</code></pre>\n",
      "id": 3
    },
    {
      "path": "en/link-types.md",
      "url": "en/link-types.html",
      "content": "---\ntitle: Link types\n---\n\nLink has few types built in.  URL, Email, Phone number, an internal Page or File.\n\n## Default link types\n\nThe default types available are:\n\n```yaml\nURL: URL\nEmail: Email address\nPhone: Phone number\nFile: File on this website\nSiteTree: Page on this website\n```\n\n## Limit allowed link types\n\nTo limit types define them in your site config.yml file as below.\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  allowed_types:\n    - URL\n    - SiteTree\n```\n\n## Allow linking to folders\n\nBy default, when the type is set to \"File\", folders cannot be selected.\nIf you want to be able to link to folders, add the following in your site config.yml file:\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  link_to_folders: true\n```\n\n## Adding custom link types\n\nTo add custom link types refer to [Adding custom link types](extending#adding-custom-link-types)\n\n## Preset link types\n\nTo add preset link types you can install [silverstripe-ymlpresetlinks](https://github.com/gorriecoe/silverstripe-ymlpresetlinks):\n\n```\ncomposer require gorriecoe/silverstripe-ymlpresetlinks\n```\n\nThen in your config.yml apply the following examples;\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  preset_types:\n    'hello-world':\n      Title: \"Hello world alert\"\n      LinkURL: \"javascript:alert('Hello World!');\"\n    'back-to-top':\n      Title: \"Scroll to top\"\n      LinkURL: \"#back-to-top\"\n    'google':\n      Title: \"Google\"\n      LinkURL: \"https://www.google.com/\"\n      OpenInNewWindow: true\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-link-types\">title: Link types <a class=\"heading-anchor-permalink\" href=\"#title%3A-link-types\">#</a></h2>\n<p>Link has few types built in.  URL, Email, Phone number, an internal Page or File.</p>\n<h2 id=\"default-link-types\">Default link types <a class=\"heading-anchor-permalink\" href=\"#default-link-types\">#</a></h2>\n<p>The default types available are:</p>\n<pre><code class=\"language-yaml\">URL: URL\nEmail: Email address\nPhone: Phone number\nFile: File on this website\nSiteTree: Page on this website\n</code></pre>\n<h2 id=\"limit-allowed-link-types\">Limit allowed link types <a class=\"heading-anchor-permalink\" href=\"#limit-allowed-link-types\">#</a></h2>\n<p>To limit types define them in your site config.yml file as below.</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  allowed_types:\n    - URL\n    - SiteTree\n</code></pre>\n<h2 id=\"allow-linking-to-folders\">Allow linking to folders <a class=\"heading-anchor-permalink\" href=\"#allow-linking-to-folders\">#</a></h2>\n<p>By default, when the type is set to “File”, folders cannot be selected.\nIf you want to be able to link to folders, add the following in your site config.yml file:</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  link_to_folders: true\n</code></pre>\n<h2 id=\"adding-custom-link-types\">Adding custom link types <a class=\"heading-anchor-permalink\" href=\"#adding-custom-link-types\">#</a></h2>\n<p>To add custom link types refer to <a href=\"extending#adding-custom-link-types\">Adding custom link types</a></p>\n<h2 id=\"preset-link-types\">Preset link types <a class=\"heading-anchor-permalink\" href=\"#preset-link-types\">#</a></h2>\n<p>To add preset link types you can install <a href=\"https://github.com/gorriecoe/silverstripe-ymlpresetlinks\">silverstripe-ymlpresetlinks</a>:</p>\n<pre><code>composer require gorriecoe/silverstripe-ymlpresetlinks\n</code></pre>\n<p>Then in your config.yml apply the following examples;</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  preset_types:\n    'hello-world':\n      Title: &quot;Hello world alert&quot;\n      LinkURL: &quot;javascript:alert('Hello World!');&quot;\n    'back-to-top':\n      Title: &quot;Scroll to top&quot;\n      LinkURL: &quot;#back-to-top&quot;\n    'google':\n      Title: &quot;Google&quot;\n      LinkURL: &quot;https://www.google.com/&quot;\n      OpenInNewWindow: true\n</code></pre>\n",
      "id": 4
    },
    {
      "path": "en/string-manipulation.md",
      "url": "en/string-manipulation.html",
      "content": "---\ntitle: String manipulation\n---\n\n## String template manipulation\n\nLink has a few methods to help manipulate DBString's.\n\n### PhoneFriendly\n\nThe method `PhoneFriendly` converts a string to a phone number e.g 0800PIZZAHUT becomes 080074992488.\n\nPHP\n\n```php\n$this->obj('Phone')->PhoneFriendly()\n```\n\nTemplate\n\n```html\n{$Phone.PhoneFriendly}\n```\n\nAdditional methods are available to modify the output of phone numbers.\n```html\n{$Phone.PhoneFriendly.E164} = +6480074992488\n{$Phone.PhoneFriendly.National} = 80074992488\n{$Phone.PhoneFriendly.International} = +64 80074992488\n{$Phone.PhoneFriendly.RFC3966} = tel:+64-80074992488\n```\n\n#### Define the country the user is dialing from\n\n```html\n{$Phone.PhoneFriendly.From('GB')}\n```\n\n#### Define the country the phone belongs to.\n\n```html\n{$Phone.PhoneFriendly.To('NZ')}\n```\n\n#### Define both to and from.\n\n```html\n{$Phone.PhoneFriendly.From('GB').To('NZ')} or {$Phone.PhoneFriendly.To('NZ').From('GB')}\n```\n\nFor more information check put <https://github.com/giggsey/libphonenumber-for-php>\n\n### LinkFriendly\n\nConverts a DBString to a url safe string.  This can be useful for anchors.\n\nPHP\n\n```php\n$this->obj('Title')->LinkFriendly()\n// or\n$this->obj('Title')->URLFriendly()\n```\n\nTemplate\n\n```html\n{$Title.LinkFriendly}\n<!-- or -->\n{$Title.URLFriendly}\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-string-manipulation\">title: String manipulation <a class=\"heading-anchor-permalink\" href=\"#title%3A-string-manipulation\">#</a></h2>\n<h2 id=\"string-template-manipulation\">String template manipulation <a class=\"heading-anchor-permalink\" href=\"#string-template-manipulation\">#</a></h2>\n<p>Link has a few methods to help manipulate DBString’s.</p>\n<h3 id=\"phonefriendly\">PhoneFriendly <a class=\"heading-anchor-permalink\" href=\"#phonefriendly\">#</a></h3>\n<p>The method <code>PhoneFriendly</code> converts a string to a phone number e.g 0800PIZZAHUT becomes 080074992488.</p>\n<p>PHP</p>\n<pre><code class=\"language-php\">$this-&gt;obj('Phone')-&gt;PhoneFriendly()\n</code></pre>\n<p>Template</p>\n<pre><code class=\"language-html\">{$Phone.PhoneFriendly}\n</code></pre>\n<p>Additional methods are available to modify the output of phone numbers.</p>\n<pre><code class=\"language-html\">{$Phone.PhoneFriendly.E164} = +6480074992488\n{$Phone.PhoneFriendly.National} = 80074992488\n{$Phone.PhoneFriendly.International} = +64 80074992488\n{$Phone.PhoneFriendly.RFC3966} = tel:+64-80074992488\n</code></pre>\n<h4 id=\"define-the-country-the-user-is-dialing-from\">Define the country the user is dialing from <a class=\"heading-anchor-permalink\" href=\"#define-the-country-the-user-is-dialing-from\">#</a></h4>\n<pre><code class=\"language-html\">{$Phone.PhoneFriendly.From('GB')}\n</code></pre>\n<h4 id=\"define-the-country-the-phone-belongs-to.\">Define the country the phone belongs to. <a class=\"heading-anchor-permalink\" href=\"#define-the-country-the-phone-belongs-to.\">#</a></h4>\n<pre><code class=\"language-html\">{$Phone.PhoneFriendly.To('NZ')}\n</code></pre>\n<h4 id=\"define-both-to-and-from.\">Define both to and from. <a class=\"heading-anchor-permalink\" href=\"#define-both-to-and-from.\">#</a></h4>\n<pre><code class=\"language-html\">{$Phone.PhoneFriendly.From('GB').To('NZ')} or {$Phone.PhoneFriendly.To('NZ').From('GB')}\n</code></pre>\n<p>For more information check put <a href=\"https://github.com/giggsey/libphonenumber-for-php\">https://github.com/giggsey/libphonenumber-for-php</a></p>\n<h3 id=\"linkfriendly\">LinkFriendly <a class=\"heading-anchor-permalink\" href=\"#linkfriendly\">#</a></h3>\n<p>Converts a DBString to a url safe string.  This can be useful for anchors.</p>\n<p>PHP</p>\n<pre><code class=\"language-php\">$this-&gt;obj('Title')-&gt;LinkFriendly()\n// or\n$this-&gt;obj('Title')-&gt;URLFriendly()\n</code></pre>\n<p>Template</p>\n<pre><code class=\"language-html\">{$Title.LinkFriendly}\n&lt;!-- or --&gt;\n{$Title.URLFriendly}\n</code></pre>\n",
      "id": 5
    },
    {
      "path": "en/templating-styling.md",
      "url": "en/templating-styling.html",
      "content": "---\ntitle: Templating and styling\n---\n\n## Basic usage\n\n```html\n<% loop Links %>\n    {$Me}\n<% end_loop %>\n```\n\n## Define link classes\n\n```html\n<% loop Links %>\n    {$addExtraClass('button')}\n<% end_loop %>\n```\nor\n```html\n<% loop Links %>\n    {$setClass('button')}\n<% end_loop %>\n```\n\n## Define a custom template to render the link\n\n```html\n<% loop Links %>\n    {$renderWith('Link_button')}\n<% end_loop %>\n```\n\n## Define a custom style.\n\nThis will apply a css class and render a custom template if it exists.  The example below will look for Link_button.ss in the includes directory.\n\n```html\n<% loop Links %>\n    {$setStyle('button')}\n<% end_loop %>\n```\n\n## Custom template\n\n```html\n<% loop Links %>\n    <% if LinkURL %>\n        <a href=\"{$LinkURL}\"{$TargetAttr}{$ClassAttr}>\n            {$Title}\n        </a>\n    <% end_if %>\n<% end_loop %>\n```\n\n## Template variables\n\n### $LinkURL\n\nReturns the URL of the link.\n\n### $TargetAttr\n\nReturns the html target attribute. `target='_blank'` or `null`\n\n### $Target\n\nReturns the html target attribute value. `_blank` or `null`\n\n### $IDAttr\n\nReturns the html id attribute. `id='my-custom-id'` or `null`\n\n### $IDValue\n\nReturns the html id value.\n\nRefer to [Add html id attribute](https://github.com/gorriecoe/silverstripe-link#add-html-id-attribute) for more information\n\n### $ClassAttr\n\nReturns the html class attribute. `class='my-custom-id'` or `null`\n\n### $Class\n\nReturns the html class value.\n\nRefer to [CMS Selectable Style](https://github.com/gorriecoe/silverstripe-link#cms-selectable-style) for more information\n\n### Linking Modes\n\nLinking mode variables are also available any sitetree link.\nRefer to [Linking Modes](https://docs.silverstripe.org/en/4/developer_guides/templates/common_variables/#linking-modes) for more information\n\n## Define a custom style via the template\n\nThis will apply a css class and render a custom template if it exists.  The example below will look for Link_button.ss in the includes directory.\n\n```html\n<% loop Links %>\n    {$setStyle('button')}\n<% end_loop %>\n```\n\n## CMS Selectable styles / style variants\n\nYou can offer CMS users the ability to select from a list of styles, allowing them to choose how their Link should be rendered. To enable this feature, register them in your site config.yml file as below:\n\n```yaml\ngorriecoe\\Link\\Models\\Link:\n  styles:\n    button: Description of button template # applies button class and looks for Link_button.ss template\n    iconbutton: Description of iconbutton template # applies iconbutton class and looks for Link_iconbutton.ss template\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-templating-and-styling\">title: Templating and styling <a class=\"heading-anchor-permalink\" href=\"#title%3A-templating-and-styling\">#</a></h2>\n<h2 id=\"basic-usage\">Basic usage <a class=\"heading-anchor-permalink\" href=\"#basic-usage\">#</a></h2>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$Me}\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"define-link-classes\">Define link classes <a class=\"heading-anchor-permalink\" href=\"#define-link-classes\">#</a></h2>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$addExtraClass('button')}\n&lt;% end_loop %&gt;\n</code></pre>\n<p>or</p>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$setClass('button')}\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"define-a-custom-template-to-render-the-link\">Define a custom template to render the link <a class=\"heading-anchor-permalink\" href=\"#define-a-custom-template-to-render-the-link\">#</a></h2>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$renderWith('Link_button')}\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"define-a-custom-style.\">Define a custom style. <a class=\"heading-anchor-permalink\" href=\"#define-a-custom-style.\">#</a></h2>\n<p>This will apply a css class and render a custom template if it exists.  The example below will look for Link_button.ss in the includes directory.</p>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$setStyle('button')}\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"custom-template\">Custom template <a class=\"heading-anchor-permalink\" href=\"#custom-template\">#</a></h2>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    &lt;% if LinkURL %&gt;\n        &lt;a href=&quot;{$LinkURL}&quot;{$TargetAttr}{$ClassAttr}&gt;\n            {$Title}\n        &lt;/a&gt;\n    &lt;% end_if %&gt;\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"template-variables\">Template variables <a class=\"heading-anchor-permalink\" href=\"#template-variables\">#</a></h2>\n<h3 id=\"%24linkurl\">$LinkURL <a class=\"heading-anchor-permalink\" href=\"#%24linkurl\">#</a></h3>\n<p>Returns the URL of the link.</p>\n<h3 id=\"%24targetattr\">$TargetAttr <a class=\"heading-anchor-permalink\" href=\"#%24targetattr\">#</a></h3>\n<p>Returns the html target attribute. <code>target='_blank'</code> or <code>null</code></p>\n<h3 id=\"%24target\">$Target <a class=\"heading-anchor-permalink\" href=\"#%24target\">#</a></h3>\n<p>Returns the html target attribute value. <code>_blank</code> or <code>null</code></p>\n<h3 id=\"%24idattr\">$IDAttr <a class=\"heading-anchor-permalink\" href=\"#%24idattr\">#</a></h3>\n<p>Returns the html id attribute. <code>id='my-custom-id'</code> or <code>null</code></p>\n<h3 id=\"%24idvalue\">$IDValue <a class=\"heading-anchor-permalink\" href=\"#%24idvalue\">#</a></h3>\n<p>Returns the html id value.</p>\n<p>Refer to <a href=\"https://github.com/gorriecoe/silverstripe-link#add-html-id-attribute\">Add html id attribute</a> for more information</p>\n<h3 id=\"%24classattr\">$ClassAttr <a class=\"heading-anchor-permalink\" href=\"#%24classattr\">#</a></h3>\n<p>Returns the html class attribute. <code>class='my-custom-id'</code> or <code>null</code></p>\n<h3 id=\"%24class\">$Class <a class=\"heading-anchor-permalink\" href=\"#%24class\">#</a></h3>\n<p>Returns the html class value.</p>\n<p>Refer to <a href=\"https://github.com/gorriecoe/silverstripe-link#cms-selectable-style\">CMS Selectable Style</a> for more information</p>\n<h3 id=\"linking-modes\">Linking Modes <a class=\"heading-anchor-permalink\" href=\"#linking-modes\">#</a></h3>\n<p>Linking mode variables are also available any sitetree link.\nRefer to <a href=\"https://docs.silverstripe.org/en/4/developer_guides/templates/common_variables/#linking-modes\">Linking Modes</a> for more information</p>\n<h2 id=\"define-a-custom-style-via-the-template\">Define a custom style via the template <a class=\"heading-anchor-permalink\" href=\"#define-a-custom-style-via-the-template\">#</a></h2>\n<p>This will apply a css class and render a custom template if it exists.  The example below will look for Link_button.ss in the includes directory.</p>\n<pre><code class=\"language-html\">&lt;% loop Links %&gt;\n    {$setStyle('button')}\n&lt;% end_loop %&gt;\n</code></pre>\n<h2 id=\"cms-selectable-styles-%2F-style-variants\">CMS Selectable styles / style variants <a class=\"heading-anchor-permalink\" href=\"#cms-selectable-styles-%2F-style-variants\">#</a></h2>\n<p>You can offer CMS users the ability to select from a list of styles, allowing them to choose how their Link should be rendered. To enable this feature, register them in your site config.yml file as below:</p>\n<pre><code class=\"language-yaml\">gorriecoe\\Link\\Models\\Link:\n  styles:\n    button: Description of button template # applies button class and looks for Link_button.ss template\n    iconbutton: Description of iconbutton template # applies iconbutton class and looks for Link_iconbutton.ss template\n</code></pre>\n",
      "id": 6
    },
    {
      "path": "en/usage.md",
      "url": "en/usage.html",
      "content": "---\ntitle: Usage\n---\n\n## Has one example\n\nFor the example below you will need to install [linkfield](https://github.com/gorriecoe/silverstripe-linkfield)\n\n```sh\ncomposer require gorriecoe/silverstripe-linkfield\n```\n\n```php\n<?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $has_one = [\n        'Button' => Link::class\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Button',\n                    'Button',\n                    $this\n\n            ]\n        );\n        return $fields;\n    }\n}\n```\n\n## Many many example\n\nFor the example below you will need to install [linkfield](https://github.com/gorriecoe/silverstripe-linkfield)\n\n```sh\ncomposer require gorriecoe/silverstripe-linkfield\n```\n\n```php\n<?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $many_many = [\n        'Buttons' => Link::class\n    ];\n\n    private static $many_many_extraFields = [\n        'Buttons' => [\n            'Sort' => 'Int' // Required for all many_many relationships\n        ]\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Buttons',\n                    'Buttons',\n                    $this\n                )\n            ]\n        );\n        return $fields;\n    }\n}\n```\n\n\n## Has many example\n\nAlthough it is possible to add a has many relationship it is *NOT* recommmended.\n\nFor the example below you will need to install [linkfield](https://github.com/gorriecoe/silverstripe-linkfield)\n\n```sh\ncomposer require gorriecoe/silverstripe-linkfield\n```\n\n```php\n<?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $has_many = [\n        'Buttons' => Link::class\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields->addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Buttons',\n                    'Buttons',\n                    $this\n                )\n            ]\n        );\n        return $fields;\n    }\n}\n```\n\nIn your config.yml\n\n```yml\ngorriecoe\\Link\\Models\\Link:\n  db:\n    Sort: Int\n```\n",
      "html": "<hr>\n<h2 id=\"title%3A-usage\">title: Usage <a class=\"heading-anchor-permalink\" href=\"#title%3A-usage\">#</a></h2>\n<h2 id=\"has-one-example\">Has one example <a class=\"heading-anchor-permalink\" href=\"#has-one-example\">#</a></h2>\n<p>For the example below you will need to install <a href=\"https://github.com/gorriecoe/silverstripe-linkfield\">linkfield</a></p>\n<pre><code class=\"language-sh\">composer require gorriecoe/silverstripe-linkfield\n</code></pre>\n<pre><code class=\"language-php\">&lt;?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $has_one = [\n        'Button' =&gt; Link::class\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields-&gt;addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Button',\n                    'Button',\n                    $this\n\n            ]\n        );\n        return $fields;\n    }\n}\n</code></pre>\n<h2 id=\"many-many-example\">Many many example <a class=\"heading-anchor-permalink\" href=\"#many-many-example\">#</a></h2>\n<p>For the example below you will need to install <a href=\"https://github.com/gorriecoe/silverstripe-linkfield\">linkfield</a></p>\n<pre><code class=\"language-sh\">composer require gorriecoe/silverstripe-linkfield\n</code></pre>\n<pre><code class=\"language-php\">&lt;?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $many_many = [\n        'Buttons' =&gt; Link::class\n    ];\n\n    private static $many_many_extraFields = [\n        'Buttons' =&gt; [\n            'Sort' =&gt; 'Int' // Required for all many_many relationships\n        ]\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields-&gt;addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Buttons',\n                    'Buttons',\n                    $this\n                )\n            ]\n        );\n        return $fields;\n    }\n}\n</code></pre>\n<h2 id=\"has-many-example\">Has many example <a class=\"heading-anchor-permalink\" href=\"#has-many-example\">#</a></h2>\n<p>Although it is possible to add a has many relationship it is <em>NOT</em> recommmended.</p>\n<p>For the example below you will need to install <a href=\"https://github.com/gorriecoe/silverstripe-linkfield\">linkfield</a></p>\n<pre><code class=\"language-sh\">composer require gorriecoe/silverstripe-linkfield\n</code></pre>\n<pre><code class=\"language-php\">&lt;?php\n\nuse gorriecoe\\Link\\Models\\Link;\nuse gorriecoe\\LinkField\\LinkField;\n\nclass MyClass extends DataObject\n{\n    private static $has_many = [\n        'Buttons' =&gt; Link::class\n    ];\n\n    /**\n     * CMS Fields\n     * @return FieldList\n     */\n    public function getCMSFields()\n    {\n        $fields = parent::getCMSFields();\n        $fields-&gt;addFieldsToTab(\n            'Root.Main',\n            [\n                LinkField::create(\n                    'Buttons',\n                    'Buttons',\n                    $this\n                )\n            ]\n        );\n        return $fields;\n    }\n}\n</code></pre>\n<p>In your config.yml</p>\n<pre><code class=\"language-yml\">gorriecoe\\Link\\Models\\Link:\n  db:\n    Sort: Int\n</code></pre>\n",
      "id": 7
    }
  ]
}