{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "01-Installation.md"
    },
    {
      "type": "file",
      "value": "02-Solr.md"
    },
    {
      "type": "file",
      "value": "03-Usage.md"
    },
    {
      "type": "dir",
      "name": "04-Advanced-Options",
      "children": [
        {
          "type": "file",
          "value": "04-Advanced-Options/01-Faceting.md"
        },
        {
          "type": "file",
          "value": "04-Advanced-Options/02-Boosting.md"
        },
        {
          "type": "file",
          "value": "04-Advanced-Options/03-Fuzzy-search.md"
        },
        {
          "type": "file",
          "value": "04-Advanced-Options/04-Elevation.md"
        }
      ]
    },
    {
      "type": "file",
      "value": "05-Customisation.md"
    },
    {
      "type": "file",
      "value": "06-CMS-Usage.md"
    },
    {
      "type": "file",
      "value": "07-Debugging.md"
    },
    {
      "type": "file",
      "value": "08-Suggestions.md"
    },
    {
      "type": "file",
      "value": "09-View-Permissions.md"
    },
    {
      "type": "file",
      "value": "10-Dirty-classes.md"
    },
    {
      "type": "dir",
      "name": "11-Submodules",
      "children": [
        {
          "type": "file",
          "value": "11-Submodules/01-Fulltext-Search-Compatibility.md"
        },
        {
          "type": "file",
          "value": "11-Submodules/02-Subsites.md"
        },
        {
          "type": "file",
          "value": "11-Submodules/03-Fluent.md"
        },
        {
          "type": "file",
          "value": "11-Submodules/04-Member-based-permissions.md"
        },
        {
          "type": "file",
          "value": "11-Submodules/05-Elemental.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "12-Contributing",
      "children": [
        {
          "type": "file",
          "value": "12-Contributing/01-Code-of-Conduct.md"
        },
        {
          "type": "file",
          "value": "12-Contributing/02-Contributing.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "13-Help",
      "children": [
        {
          "type": "file",
          "value": "13-Help/01-Changelog.md"
        },
        {
          "type": "file",
          "value": "13-Help/02-FAQ.md"
        },
        {
          "type": "file",
          "value": "13-Help/03-Known-issues.md"
        }
      ]
    },
    {
      "type": "dir",
      "name": "14-About",
      "children": [
        {
          "type": "file",
          "value": "14-About/01-About.md"
        },
        {
          "type": "file",
          "value": "14-About/02-Coverage.md"
        },
        {
          "type": "dir",
          "name": "03-Codebase",
          "children": [
            {
              "type": "file",
              "value": "14-About/03-Codebase/01-Main-stats.md"
            },
            {
              "type": "file",
              "value": "14-About/03-Codebase/02-Compatibility-stats.md"
            },
            {
              "type": "file",
              "value": "14-About/03-Codebase/03-Member-permission-stats.md"
            },
            {
              "type": "file",
              "value": "14-About/03-Codebase/04-Fluent-stats.md"
            },
            {
              "type": "file",
              "value": "14-About/03-Codebase/05-Subsites-stats.md"
            }
          ]
        },
        {
          "type": "file",
          "value": "14-About/04-Plans.md"
        }
      ]
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Solr Search\n\nAdvanced searching for SilverStripe with Solr. Versions 4-8+ are supported.\n\n## Table of Contents\n\n01. [Installation](01-Installation.md)\n02. [Solr](02-Solr.md)\n03. [Usage](03-Usage.md)\n04. Advanced search options\n    01. [Facets](04-Advanced-Options/01-Faceting.md)\n    02. [Boosting](04-Advanced-Options/02-Boosting.md)\n    03. [Fuzzy search](04-Advanced-Options/03-Fuzzy-search.md)\n05. [Customisation](05-Customisation.md)\n06. [CMS Usage](06-CMS-Usage.md)\n07. [Debugging](07-Debugging.md)\n08. [Suggestions](08-Suggestions.md)\n09. [View permissions](09-View-Permissions.md)\n10. [Dirty classes](10-Dirty-classes.md)\n11. Submodules\n    01. [Fulltext Search compatibility](11-Submodules/01-Fulltext-Search-Compatibility.md)\n    02. [Subsites](11-Submodules/02-Subsites.md)\n    03. [Fluent](11-Submodules/03-Fluent.md)\n    04. [Member based permissions](11-Submodules/04-Member-based-permissions.md)\n    05. [Elemental](11-Submodules/05-Elemental.md)\n12. Contributing\n    01. [Code of Conduct](12-Contributing/01-Code-of-Conduct.md)\n    02. [Contributing](12-Contributing/02-Contributing.md) \n13. Help\n    01. [Changelog](13-Help/01-Changelog.md)\n    02. [FAQ](13-Help/02-FAQ.md)\n    03. [Known issues](13-Help/03-Known-issues.md)\n14. About\n    01. [About](14-About/01-About.md)\n    02. [Coverage](14-About/02-Coverage.md)\n    03. Code Statistics for each (sub-)module\n        01. [Base code statistics](14-About/03-Codebase/01-Main-stats.md)\n        01. [Compatibility code statistics](14-About/03-Codebase/02-Compatibility-stats.md)\n        01. [Member permissions code statistics](14-About/03-Codebase/03-Member-permission-stats.md)\n        01. [Fluent code statistics](14-About/03-Codebase/04-Fluent-stats.md)\n        01. [Subsite code statistics](14-About/03-Codebase/05-Subsites-stats.md)\n    04. [Plans](14-About/04-Plans.md)\n    \n# Sponsors\n\n- None so far 😿\n    \n# [GitStore](https://enjoy.gitstore.app/repositories/Firesphere/silverstripe-solr-search)\n\n[Please see the GitStore FAQ section](13-Help/02-FAQ.html#gitstore)\n",
      "html": "<h1 id=\"solr-search\">Solr Search <a class=\"heading-anchor-permalink\" href=\"#solr-search\">#</a></h1>\n<p>Advanced searching for SilverStripe with Solr. Versions 4-8+ are supported.</p>\n<h2 id=\"table-of-contents\">Table of Contents <a class=\"heading-anchor-permalink\" href=\"#table-of-contents\">#</a></h2>\n<ol>\n<li><a href=\"01-Installation.html\">Installation</a></li>\n<li><a href=\"02-Solr.html\">Solr</a></li>\n<li><a href=\"03-Usage.html\">Usage</a></li>\n<li>Advanced search options\n<ol>\n<li><a href=\"04-Advanced-Options/01-Faceting.html\">Facets</a></li>\n<li><a href=\"04-Advanced-Options/02-Boosting.html\">Boosting</a></li>\n<li><a href=\"04-Advanced-Options/03-Fuzzy-search.html\">Fuzzy search</a></li>\n</ol>\n</li>\n<li><a href=\"05-Customisation.html\">Customisation</a></li>\n<li><a href=\"06-CMS-Usage.html\">CMS Usage</a></li>\n<li><a href=\"07-Debugging.html\">Debugging</a></li>\n<li><a href=\"08-Suggestions.html\">Suggestions</a></li>\n<li><a href=\"09-View-Permissions.html\">View permissions</a></li>\n<li><a href=\"10-Dirty-classes.html\">Dirty classes</a></li>\n<li>Submodules\n<ol>\n<li><a href=\"11-Submodules/01-Fulltext-Search-Compatibility.html\">Fulltext Search compatibility</a></li>\n<li><a href=\"11-Submodules/02-Subsites.html\">Subsites</a></li>\n<li><a href=\"11-Submodules/03-Fluent.html\">Fluent</a></li>\n<li><a href=\"11-Submodules/04-Member-based-permissions.html\">Member based permissions</a></li>\n<li><a href=\"11-Submodules/05-Elemental.html\">Elemental</a></li>\n</ol>\n</li>\n<li>Contributing\n<ol>\n<li><a href=\"12-Contributing/01-Code-of-Conduct.html\">Code of Conduct</a></li>\n<li><a href=\"12-Contributing/02-Contributing.html\">Contributing</a></li>\n</ol>\n</li>\n<li>Help\n<ol>\n<li><a href=\"13-Help/01-Changelog.html\">Changelog</a></li>\n<li><a href=\"13-Help/02-FAQ.html\">FAQ</a></li>\n<li><a href=\"13-Help/03-Known-issues.html\">Known issues</a></li>\n</ol>\n</li>\n<li>About\n<ol>\n<li><a href=\"14-About/01-About.html\">About</a></li>\n<li><a href=\"14-About/02-Coverage.html\">Coverage</a></li>\n<li>Code Statistics for each (sub-)module\n<ol>\n<li><a href=\"14-About/03-Codebase/01-Main-stats.html\">Base code statistics</a></li>\n<li><a href=\"14-About/03-Codebase/02-Compatibility-stats.html\">Compatibility code statistics</a></li>\n<li><a href=\"14-About/03-Codebase/03-Member-permission-stats.html\">Member permissions code statistics</a></li>\n<li><a href=\"14-About/03-Codebase/04-Fluent-stats.html\">Fluent code statistics</a></li>\n<li><a href=\"14-About/03-Codebase/05-Subsites-stats.html\">Subsite code statistics</a></li>\n</ol>\n</li>\n<li><a href=\"14-About/04-Plans.html\">Plans</a></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"sponsors\">Sponsors <a class=\"heading-anchor-permalink\" href=\"#sponsors\">#</a></h1>\n<ul>\n<li>None so far 😿</li>\n</ul>\n<h1 id=\"gitstore\"><a href=\"https://enjoy.gitstore.app/repositories/Firesphere/silverstripe-solr-search\">GitStore</a> <a class=\"heading-anchor-permalink\" href=\"#gitstore\">#</a></h1>\n<p><a href=\"13-Help/02-FAQ.html#gitstore\">Please see the GitStore FAQ section</a></p>\n",
      "id": 0
    },
    {
      "path": "01-Installation.md",
      "url": "01-Installation.html",
      "content": "# Installing the module\n\nBest practice is to use composer:\n`composer require firesphere/solr-search`\n\n## Manual setup\n\n- Create a clean installation of SilverStripe 4 (`composer create-project`)\n- Clone this repo in to the folder of your likings\n- Check which modules you need to add to your base composer.json\n- Run a composer update\n- Create a base index:\n```php\nclass MyIndex extends BaseIndex\n{\n    /**\n     * Called during construction, this is the method that builds the structure.\n     * Used instead of overriding __construct as we have specific execution order - code that has\n     * to be run before _and/or_ after this.\n     * @throws Exception\n     */\n    public function init()\n    {\n        $this->addClass(SiteTree::class);\n\n        $this->addFulltextField('Title');\n    }\n    \n    public function getIndexName()\n    {\n        return 'this-is-my-index';\n    }\n}\n```\n- Run `vendor/bin/sake dev/tasks/SolrConfigureTask` to configure the core\n- Run `vendor/bin/sake dev/tasks/SolrIndexTask` to add documents to your index\n\nHappy searching after that... once this is done\n",
      "html": "<h1 id=\"installing-the-module\">Installing the module <a class=\"heading-anchor-permalink\" href=\"#installing-the-module\">#</a></h1>\n<p>Best practice is to use composer:\n<code>composer require firesphere/solr-search</code></p>\n<h2 id=\"manual-setup\">Manual setup <a class=\"heading-anchor-permalink\" href=\"#manual-setup\">#</a></h2>\n<ul>\n<li>Create a clean installation of SilverStripe 4 (<code>composer create-project</code>)</li>\n<li>Clone this repo in to the folder of your likings</li>\n<li>Check which modules you need to add to your base composer.json</li>\n<li>Run a composer update</li>\n<li>Create a base index:</li>\n</ul>\n<pre><code class=\"language-php\">class MyIndex extends BaseIndex\n{\n    /**\n     * Called during construction, this is the method that builds the structure.\n     * Used instead of overriding __construct as we have specific execution order - code that has\n     * to be run before _and/or_ after this.\n     * @throws Exception\n     */\n    public function init()\n    {\n        $this-&gt;addClass(SiteTree::class);\n\n        $this-&gt;addFulltextField('Title');\n    }\n    \n    public function getIndexName()\n    {\n        return 'this-is-my-index';\n    }\n}\n</code></pre>\n<ul>\n<li>Run <code>vendor/bin/sake dev/tasks/SolrConfigureTask</code> to configure the core</li>\n<li>Run <code>vendor/bin/sake dev/tasks/SolrIndexTask</code> to add documents to your index</li>\n</ul>\n<p>Happy searching after that… once this is done</p>\n",
      "id": 1
    },
    {
      "path": "02-Solr.md",
      "url": "02-Solr.html",
      "content": "# Installing Solr\n\nAdvised is to use the latest Solr version. At the time of writing, this is version 8.3.0.\n\nIn this guide, it's assumed you are running on a Linux based host.\n\n## Requirements\n\n### Java\n\n#### Debian based distributions\n\n`sudo apt install default-jre`\n\n#### Debian Jessie\n\nDebian Jessie needs backports to get Java 8 working:\n```bash\necho \"deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main\" > /etc/apt/sources.list.d/jessie-backports.list\napt-get update\napt-get install -t jessie-backports openjdk-8-jre\n```\n\nIf you run in to trouble updating, add the following to `/etc/apt/apt.conf`:\n- `Acquire::Check-Valid-Until \"false\";`\n\n## Installation\n\nTaken from https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html\n\nUpdate to match the required version. You can find the latest version here: https://www-us.apache.org/dist/lucene/solr/\n```bash\nwget http://www.apache.org/dyn/closer.lua/lucene/solr/8.3.1/solr-8.3.1.tgz # find your local URL manually\ntar xvf solr-8.3.1.tgz solr-8.3.1/bin/install_solr_service.sh --strip-components=2\nsudo bash ./install_solr_service.sh solr-8.3.1.tgz\n```\n\nThis will install Solr 8.x as a service on your (virtual) machine\n\n## Vagrant machines\n\nSee [Known issues](13-Help/03-Known-issues.md) for known issues with Vagrant\n",
      "html": "<h1 id=\"installing-solr\">Installing Solr <a class=\"heading-anchor-permalink\" href=\"#installing-solr\">#</a></h1>\n<p>Advised is to use the latest Solr version. At the time of writing, this is version 8.3.0.</p>\n<p>In this guide, it’s assumed you are running on a Linux based host.</p>\n<h2 id=\"requirements\">Requirements <a class=\"heading-anchor-permalink\" href=\"#requirements\">#</a></h2>\n<h3 id=\"java\">Java <a class=\"heading-anchor-permalink\" href=\"#java\">#</a></h3>\n<h4 id=\"debian-based-distributions\">Debian based distributions <a class=\"heading-anchor-permalink\" href=\"#debian-based-distributions\">#</a></h4>\n<p><code>sudo apt install default-jre</code></p>\n<h4 id=\"debian-jessie\">Debian Jessie <a class=\"heading-anchor-permalink\" href=\"#debian-jessie\">#</a></h4>\n<p>Debian Jessie needs backports to get Java 8 working:</p>\n<pre><code class=\"language-bash\">echo &quot;deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main&quot; &gt; /etc/apt/sources.list.d/jessie-backports.list\napt-get update\napt-get install -t jessie-backports openjdk-8-jre\n</code></pre>\n<p>If you run in to trouble updating, add the following to <code>/etc/apt/apt.conf</code>:</p>\n<ul>\n<li><code>Acquire::Check-Valid-Until &quot;false&quot;;</code></li>\n</ul>\n<h2 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h2>\n<p>Taken from <a href=\"https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html\">https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html</a></p>\n<p>Update to match the required version. You can find the latest version here: <a href=\"https://www-us.apache.org/dist/lucene/solr/\">https://www-us.apache.org/dist/lucene/solr/</a></p>\n<pre><code class=\"language-bash\">wget http://www.apache.org/dyn/closer.lua/lucene/solr/8.3.1/solr-8.3.1.tgz # find your local URL manually\ntar xvf solr-8.3.1.tgz solr-8.3.1/bin/install_solr_service.sh --strip-components=2\nsudo bash ./install_solr_service.sh solr-8.3.1.tgz\n</code></pre>\n<p>This will install Solr 8.x as a service on your (virtual) machine</p>\n<h2 id=\"vagrant-machines\">Vagrant machines <a class=\"heading-anchor-permalink\" href=\"#vagrant-machines\">#</a></h2>\n<p>See <a href=\"13-Help/03-Known-issues.html\">Known issues</a> for known issues with Vagrant</p>\n",
      "id": 2
    },
    {
      "path": "03-Usage.md",
      "url": "03-Usage.html",
      "content": "# Usage\n\n## Getting started\n\nYou first _need_ to create an index extending the `Firesphere\\SolrSearch\\Indexes\\BaseIndex` class, or if you are using the compatibility\nmodule, the `SilverStripe\\FullTextSearch\\Solr\\SolrIndex` class.\n\nIf you are extending the base Index, it will require a `getIndexName` method\nwhich is used to determine the name of the index to query Solr.\n\nAlthough the compatibility module provides a core naming scheme, it is still highly recommended\nto implement your own method.\n\n**IMPORTANT**\n\nThe usage of `YML` as a replacement for the core configuration, it  is not a replacement \nfor creating your own Index extending either of the Base Indexes, it is a compliment to it.\n\n`YML` is purely used for the configuration of the index Classes.\n\n## Configuration\n\nConfiguring Solr is done via YML:\n```yml\nFiresphere\\SolrSearch\\Services\\SolrCoreService:\n  config:\n    endpoint:\n      myhostname:\n        host: myhost.com\n        port: 8983\n        timeout: 10\n        # set up timeouts\n        index_timeout: 10\n        optimize_timeout: 100\n        finalize_timeout: 300\n        http_method: 'AUTO'\n        # commit within 60ms\n        commit_within: 60\n  # default path settings\n  store:\n    mode: 'file'\n    path: '.solr'\n  cpucores: 2\n\n```\n\nNote, if you are using defaults (localhost), it is not necessary to add this to your configuration.\n\nThe config is used to connect to Solr. This will tell the module where the Solr instance for this index lives and how to connect.\n\nThe store is to select the way to configure the solr configuration storage. Options are `file` and a required path, or `post` and a required endpoint to post to.\n\nPost config:\n```yml\nstore:\n  mode: 'post'\n  path: '/my_post_endpoint'\n  uri: 'https://mydomain.com'\n```\n\n#### ShowInSearch\n\n`ShowInSearch` is handled by the module itself, so there is no need to configure it within your YML/PHP index definition. \nWhen a content author sets this field to 0 via the CMS, then the related Page or File object is actually _removed_ from the applicable Solr \ncore immediately through the `onAfterPublish` or `onAfterWrite` method, or during the next run of the `SolrIndexJob`.\n\nTherefore, custom addition of `ShowInSearch` as a filterable or indexable field in YML for example, \nis likely to cause unexpected behaviour.\n\nThe reason for removing `ShowInSearch = false|0` from the indexing process, \nis to streamline the number of items stored in Solr's indexes. \nThere is no effective need for items to be in the search, if they're not supposed to \nbe displayed.\n\n#### Dirty classes\n\nIf a change fails to update, a `DirtyClass` is created, recording the need for updating\nsaid object. It is recommended to automatically run the `ClearDirtyClasses` task every few hours\ndepending on the expected amount of changes daily and the importance of changes.\n\nGiven the expected time of the dirty classes to be cleaned out is quite low, it's suggested to run\nthis task every 5 or 10 minutes.\n\n#### Defining the amount of CPU cores\n\nIf your server has multiple CPU cores available, you can define the amount of cores in the config.\nDuring indexing, this means that each core gets to do an indexing of a group.\nThe advantage is that it takes all cores available, speeding up the indexing process by the amount of cores available.\n\nBecause the amount of cores can not be determined programmatically, due to access control, you will have to define \nthe amount of cores available manually.\n\n\n**NOTE**\n\nGiven the current situation in server-land, the default amount of cores is 2. This should work fine for\nmost situations, even if you only have one core available. If you have more cores, you can make this\namount larger, of course.\n\n**NOTE**\n\nUsing all cores your system has, will make your website pretty slow during indexing! It is adviced to keep\nat least one core free for handling page visits, while you're running an index.\n\n### Using init()\n\nSimilar to the FulltextSearch module, using init supports all basic methods to add fulltext or filter fields.\n\nAvailable methods are:\n\n| Method | Purpose | Required | Usage |\n|-|-|-|-|\n| addClass | Add classes to index | Yes | `$this->addClass(SiteTree::class);` |\n| addFulltextField | Add fields to index | No<sup>1</sup> | `$this->addFulltextField('Content');` |\n| addAllFulltextField | Add all text fields to index | No | `$this->addAllFulltextFields();` |\n| addFilterField | Add fields to use for filtering | No | `$this->addFilterField('ID');` |\n| addBoostedField | Fields to boost by on Query time | No | `$this->addBoostedField('Title', ([]/2), 2);`<sup>2</sup> |\n| addSortField | Field to sort by | No | `$this->addSortField('Created');` |\n| addCopyField | Add a special copy field, besides the default _text | No | `$this->addCopyField('myCopy', ['Fields', 'To', 'Copy']);` |\n| addStoredField | Add a field to be stored specifically | No | `$this->addStoredField('LastEdited');` |\n| addFacetField | Field to build faceting on | No | `$this->addFacetField(SiteTree::class, ['BaseClass' => SiteTree::class, 'Title' => 'FacetObject', 'Field' => 'FacetObjectID']);` |\n \n\n### Using YML\n\n```yml\nFiresphere\\SolrSearch\\Indexes\\BaseIndex:\n  MySearchIndex:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Content\n      - TestObject.Title\n      - TestObject.TestRelation.Title\n    SortFields: \n\t  - Created\n    FilterFields:\n      - Title\n      - Created\n      - Firesphere\\SolrSearch\\Tests\\TestObject\n    BoostedFields:\n\t  - Title\n    CopyFields:\n      _text:\n        - '*'\n    DefaultField: _text\n    FacetFields:\n      Firesphere\\SolrSearch\\Tests\\TestObject:\n        BaseClass: SilverStripe\\CMS\\Model\\SiteTree\n        Field: ID\n        Title: TestObject\n\n```\n\n#### MySearchIndex\n\nThis name should match the name you provided in your Index extending the `BaseIndex` you are instructed\nto create in the first step of this document.\n\n#### Moving from init to YML\n\nThe [compatibility module](11-Submodules/01-Fulltext-Search-Compatibility.md) has an optional extension method that allows you to build your index and then generate the YML content for you. See the compatibility module for more details.\n\n## Grouped indexing\n\nNote, grouped indexing is `0` based. Thus, if there are 150 groups to index, the final group to index will be 149 instead of 150.\n\n## Another way to set the config in PHP\n\nYou could also use PHP, just like it was, to set the config. For readability however, it's better to use variables for Facets:\n```php\n    protected $facetFields = [\n        RelatedObject::class   => [\n            'BaseClass' => SiteTree::class,\n            'Field'     => 'RelatedObjectID',\n            'Title'     => 'RelationOne'\n        ],\n        OtherRelatedObject::class => [\n            'BaseClass' => SiteTree::class,\n            'Field'     => 'OtherRelatedObjectID',\n            'Title'     => 'RelationTwo'\n        ]\n    ];\n```\n\nThis will generate a facet field in Solr, assuming this relation exists on `SiteTree` or `Page`.\n\nThe relation would look like `SiteTree_RelatedObjectID`, where `RelatedObject` the name of the relation reflects.\n\nThe Title is used to group all facets by their Title, in the template, this is accessible by looping `$Result.FacetSet.TitleOfTheFacet`\n\n### Important notice\n\nNote, that Facets are relational. For faceting on a relation, omit the origin class (e.g. `SiteTree`), but supply the full relational\npath to the facet. e.g. if you want to have facets on `RelationObject->RelationThing()->Relation()->ID`, the Facet declaration should be\n`RelationObject.RelationThing.RelationID`. It should always end with an ID that is a `has_one` relation.\n\nAlthough it can be a `has_many` just as well, and it would be `Relation.ID`, it is not advised, as it creates a lot of overhead.\n\nIt would and should work though. If you want to do it that way, there's no stopping you, it's just not advised. \n\n## Accessing Solr\n\nIf available, you can access your Solr instance at `http://mydomain.com:8983`\n\n## Excluding unwanted indexes\n\nTo exclude unwanted indexes, it is possible declare a list of _wanted_ indexes in the `YML`\n\n```yaml\nFiresphere\\SolrSearch\\Services\\SolrCoreService:\n  indexes:\n    - CircleCITestIndex\n    - Firesphere\\SolrSearch\\Tests\\TestIndex\n    - Firesphere\\SolrSearch\\Tests\\TestIndexTwo\n    - Firesphere\\SolrSearch\\Tests\\TestIndexThree\n```\n\nLooking at the `tests` folder, there is a `TestIndexFour`. This index is not loaded unless explicitly asked.\n\n# Executing a search\n\nTo search, here's an example using all the features, and set the resulting outcome from the search\non the current `Controller` to be useable in the templates.\n\n```php\nclass SearchController extends PageController\n{\n    /**\n     * @param array $data Data from the submission\n     * @param SearchForm $form Submitted search form\n     * @return $this\n     */\n    public function searchMyContent($data, $form)\n    {\n        $searchVars = $this->getRequest()->getVars();\n        if (!empty($searchVars)) {\n            $this->setQuery($searchVars);\n            /** @var BaseIndex $index */\n            $index = Injector::inst()->get(MyIndex::class);\n    \n            // Start building the query, by adding the query term\n            $query = new BaseQuery();\n            $query->addTerm($searchVars['Query']);\n    \n            // Set the facets\n            $query->setFacetsMinCount(1);\n            $facetedFields = $index->getFacetFields();\n            foreach ($facetedFields as $className => $field) {\n                if (!empty($data[$field['Title']])) {\n                    $query->addFacetFilter($field['Title'], $data[$field['Title']]);\n                }\n            }\n    \n            // Set the startpoint of the results\n            $offset = $this->getRequest()->getVar('start') ?: 0;\n            $query->setStart($offset);\n    \n            // Assuming \"Order\" is your query parameter that defines the sort order\n            $sort = isset($data['Order']) ? strtolower($data['Order']) : 'asc';\n    \n            // Set the sorting. This can be an array of multiple sorts\n            $params['sort'] = MySortableClass::class . '_Created ' . $sort;\n            $query->setSort($params);\n    \n            // Execute the search\n            $result = $index->doSearch($query);\n    \n            // Set the query, possibly to be used to display it back to the user\n            $this->setQuery($searchVars);\n            // Set the total items found\n            $this->setTotal($result->Matches->totalItems);\n            // Set the results on the Controller\n            $this->setResults($result->Matches);\n            // If there is some spellchecking, set it to be used in the template\n            $this->setSpellcheck($result->Spellcheck);\n            // Set the list of facets\n            $this->setFacets($result->Facets);\n        }\n    \n        return $this;\n    }\n}\n```\n\n**NOTE**\n\nThis is so called \"pseudo code\", it may not exactly work, but serves as example.\n \n----------\n<sup>1</sup> Although not required, it's highly recomended\n\n<sup>2</sup> The second option of an array can be omitted and directly given the boost value\n",
      "html": "<h1 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h1>\n<h2 id=\"getting-started\">Getting started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>You first <em>need</em> to create an index extending the <code>Firesphere\\SolrSearch\\Indexes\\BaseIndex</code> class, or if you are using the compatibility\nmodule, the <code>SilverStripe\\FullTextSearch\\Solr\\SolrIndex</code> class.</p>\n<p>If you are extending the base Index, it will require a <code>getIndexName</code> method\nwhich is used to determine the name of the index to query Solr.</p>\n<p>Although the compatibility module provides a core naming scheme, it is still highly recommended\nto implement your own method.</p>\n<p><strong>IMPORTANT</strong></p>\n<p>The usage of <code>YML</code> as a replacement for the core configuration, it  is not a replacement\nfor creating your own Index extending either of the Base Indexes, it is a compliment to it.</p>\n<p><code>YML</code> is purely used for the configuration of the index Classes.</p>\n<h2 id=\"configuration\">Configuration <a class=\"heading-anchor-permalink\" href=\"#configuration\">#</a></h2>\n<p>Configuring Solr is done via YML:</p>\n<pre><code class=\"language-yml\">Firesphere\\SolrSearch\\Services\\SolrCoreService:\n  config:\n    endpoint:\n      myhostname:\n        host: myhost.com\n        port: 8983\n        timeout: 10\n        # set up timeouts\n        index_timeout: 10\n        optimize_timeout: 100\n        finalize_timeout: 300\n        http_method: 'AUTO'\n        # commit within 60ms\n        commit_within: 60\n  # default path settings\n  store:\n    mode: 'file'\n    path: '.solr'\n  cpucores: 2\n\n</code></pre>\n<p>Note, if you are using defaults (localhost), it is not necessary to add this to your configuration.</p>\n<p>The config is used to connect to Solr. This will tell the module where the Solr instance for this index lives and how to connect.</p>\n<p>The store is to select the way to configure the solr configuration storage. Options are <code>file</code> and a required path, or <code>post</code> and a required endpoint to post to.</p>\n<p>Post config:</p>\n<pre><code class=\"language-yml\">store:\n  mode: 'post'\n  path: '/my_post_endpoint'\n  uri: 'https://mydomain.com'\n</code></pre>\n<h4 id=\"showinsearch\">ShowInSearch <a class=\"heading-anchor-permalink\" href=\"#showinsearch\">#</a></h4>\n<p><code>ShowInSearch</code> is handled by the module itself, so there is no need to configure it within your YML/PHP index definition.\nWhen a content author sets this field to 0 via the CMS, then the related Page or File object is actually <em>removed</em> from the applicable Solr\ncore immediately through the <code>onAfterPublish</code> or <code>onAfterWrite</code> method, or during the next run of the <code>SolrIndexJob</code>.</p>\n<p>Therefore, custom addition of <code>ShowInSearch</code> as a filterable or indexable field in YML for example,\nis likely to cause unexpected behaviour.</p>\n<p>The reason for removing <code>ShowInSearch = false|0</code> from the indexing process,\nis to streamline the number of items stored in Solr’s indexes.\nThere is no effective need for items to be in the search, if they’re not supposed to\nbe displayed.</p>\n<h4 id=\"dirty-classes\">Dirty classes <a class=\"heading-anchor-permalink\" href=\"#dirty-classes\">#</a></h4>\n<p>If a change fails to update, a <code>DirtyClass</code> is created, recording the need for updating\nsaid object. It is recommended to automatically run the <code>ClearDirtyClasses</code> task every few hours\ndepending on the expected amount of changes daily and the importance of changes.</p>\n<p>Given the expected time of the dirty classes to be cleaned out is quite low, it’s suggested to run\nthis task every 5 or 10 minutes.</p>\n<h4 id=\"defining-the-amount-of-cpu-cores\">Defining the amount of CPU cores <a class=\"heading-anchor-permalink\" href=\"#defining-the-amount-of-cpu-cores\">#</a></h4>\n<p>If your server has multiple CPU cores available, you can define the amount of cores in the config.\nDuring indexing, this means that each core gets to do an indexing of a group.\nThe advantage is that it takes all cores available, speeding up the indexing process by the amount of cores available.</p>\n<p>Because the amount of cores can not be determined programmatically, due to access control, you will have to define\nthe amount of cores available manually.</p>\n<p><strong>NOTE</strong></p>\n<p>Given the current situation in server-land, the default amount of cores is 2. This should work fine for\nmost situations, even if you only have one core available. If you have more cores, you can make this\namount larger, of course.</p>\n<p><strong>NOTE</strong></p>\n<p>Using all cores your system has, will make your website pretty slow during indexing! It is adviced to keep\nat least one core free for handling page visits, while you’re running an index.</p>\n<h3 id=\"using-init()\">Using init() <a class=\"heading-anchor-permalink\" href=\"#using-init()\">#</a></h3>\n<p>Similar to the FulltextSearch module, using init supports all basic methods to add fulltext or filter fields.</p>\n<p>Available methods are:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Purpose</th>\n<th>Required</th>\n<th>Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addClass</td>\n<td>Add classes to index</td>\n<td>Yes</td>\n<td><code>$this-&gt;addClass(SiteTree::class);</code></td>\n</tr>\n<tr>\n<td>addFulltextField</td>\n<td>Add fields to index</td>\n<td>No<sup>1</sup></td>\n<td><code>$this-&gt;addFulltextField('Content');</code></td>\n</tr>\n<tr>\n<td>addAllFulltextField</td>\n<td>Add all text fields to index</td>\n<td>No</td>\n<td><code>$this-&gt;addAllFulltextFields();</code></td>\n</tr>\n<tr>\n<td>addFilterField</td>\n<td>Add fields to use for filtering</td>\n<td>No</td>\n<td><code>$this-&gt;addFilterField('ID');</code></td>\n</tr>\n<tr>\n<td>addBoostedField</td>\n<td>Fields to boost by on Query time</td>\n<td>No</td>\n<td><code>$this-&gt;addBoostedField('Title', ([]/2), 2);</code><sup>2</sup></td>\n</tr>\n<tr>\n<td>addSortField</td>\n<td>Field to sort by</td>\n<td>No</td>\n<td><code>$this-&gt;addSortField('Created');</code></td>\n</tr>\n<tr>\n<td>addCopyField</td>\n<td>Add a special copy field, besides the default _text</td>\n<td>No</td>\n<td><code>$this-&gt;addCopyField('myCopy', ['Fields', 'To', 'Copy']);</code></td>\n</tr>\n<tr>\n<td>addStoredField</td>\n<td>Add a field to be stored specifically</td>\n<td>No</td>\n<td><code>$this-&gt;addStoredField('LastEdited');</code></td>\n</tr>\n<tr>\n<td>addFacetField</td>\n<td>Field to build faceting on</td>\n<td>No</td>\n<td><code>$this-&gt;addFacetField(SiteTree::class, ['BaseClass' =&gt; SiteTree::class, 'Title' =&gt; 'FacetObject', 'Field' =&gt; 'FacetObjectID']);</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"using-yml\">Using YML <a class=\"heading-anchor-permalink\" href=\"#using-yml\">#</a></h3>\n<pre><code class=\"language-yml\">Firesphere\\SolrSearch\\Indexes\\BaseIndex:\n  MySearchIndex:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Content\n      - TestObject.Title\n      - TestObject.TestRelation.Title\n    SortFields: \n\t  - Created\n    FilterFields:\n      - Title\n      - Created\n      - Firesphere\\SolrSearch\\Tests\\TestObject\n    BoostedFields:\n\t  - Title\n    CopyFields:\n      _text:\n        - '*'\n    DefaultField: _text\n    FacetFields:\n      Firesphere\\SolrSearch\\Tests\\TestObject:\n        BaseClass: SilverStripe\\CMS\\Model\\SiteTree\n        Field: ID\n        Title: TestObject\n\n</code></pre>\n<h4 id=\"mysearchindex\">MySearchIndex <a class=\"heading-anchor-permalink\" href=\"#mysearchindex\">#</a></h4>\n<p>This name should match the name you provided in your Index extending the <code>BaseIndex</code> you are instructed\nto create in the first step of this document.</p>\n<h4 id=\"moving-from-init-to-yml\">Moving from init to YML <a class=\"heading-anchor-permalink\" href=\"#moving-from-init-to-yml\">#</a></h4>\n<p>The <a href=\"11-Submodules/01-Fulltext-Search-Compatibility.html\">compatibility module</a> has an optional extension method that allows you to build your index and then generate the YML content for you. See the compatibility module for more details.</p>\n<h2 id=\"grouped-indexing\">Grouped indexing <a class=\"heading-anchor-permalink\" href=\"#grouped-indexing\">#</a></h2>\n<p>Note, grouped indexing is <code>0</code> based. Thus, if there are 150 groups to index, the final group to index will be 149 instead of 150.</p>\n<h2 id=\"another-way-to-set-the-config-in-php\">Another way to set the config in PHP <a class=\"heading-anchor-permalink\" href=\"#another-way-to-set-the-config-in-php\">#</a></h2>\n<p>You could also use PHP, just like it was, to set the config. For readability however, it’s better to use variables for Facets:</p>\n<pre><code class=\"language-php\">    protected $facetFields = [\n        RelatedObject::class   =&gt; [\n            'BaseClass' =&gt; SiteTree::class,\n            'Field'     =&gt; 'RelatedObjectID',\n            'Title'     =&gt; 'RelationOne'\n        ],\n        OtherRelatedObject::class =&gt; [\n            'BaseClass' =&gt; SiteTree::class,\n            'Field'     =&gt; 'OtherRelatedObjectID',\n            'Title'     =&gt; 'RelationTwo'\n        ]\n    ];\n</code></pre>\n<p>This will generate a facet field in Solr, assuming this relation exists on <code>SiteTree</code> or <code>Page</code>.</p>\n<p>The relation would look like <code>SiteTree_RelatedObjectID</code>, where <code>RelatedObject</code> the name of the relation reflects.</p>\n<p>The Title is used to group all facets by their Title, in the template, this is accessible by looping <code>$Result.FacetSet.TitleOfTheFacet</code></p>\n<h3 id=\"important-notice\">Important notice <a class=\"heading-anchor-permalink\" href=\"#important-notice\">#</a></h3>\n<p>Note, that Facets are relational. For faceting on a relation, omit the origin class (e.g. <code>SiteTree</code>), but supply the full relational\npath to the facet. e.g. if you want to have facets on <code>RelationObject-&gt;RelationThing()-&gt;Relation()-&gt;ID</code>, the Facet declaration should be\n<code>RelationObject.RelationThing.RelationID</code>. It should always end with an ID that is a <code>has_one</code> relation.</p>\n<p>Although it can be a <code>has_many</code> just as well, and it would be <code>Relation.ID</code>, it is not advised, as it creates a lot of overhead.</p>\n<p>It would and should work though. If you want to do it that way, there’s no stopping you, it’s just not advised.</p>\n<h2 id=\"accessing-solr\">Accessing Solr <a class=\"heading-anchor-permalink\" href=\"#accessing-solr\">#</a></h2>\n<p>If available, you can access your Solr instance at <code>http://mydomain.com:8983</code></p>\n<h2 id=\"excluding-unwanted-indexes\">Excluding unwanted indexes <a class=\"heading-anchor-permalink\" href=\"#excluding-unwanted-indexes\">#</a></h2>\n<p>To exclude unwanted indexes, it is possible declare a list of <em>wanted</em> indexes in the <code>YML</code></p>\n<pre><code class=\"language-yaml\">Firesphere\\SolrSearch\\Services\\SolrCoreService:\n  indexes:\n    - CircleCITestIndex\n    - Firesphere\\SolrSearch\\Tests\\TestIndex\n    - Firesphere\\SolrSearch\\Tests\\TestIndexTwo\n    - Firesphere\\SolrSearch\\Tests\\TestIndexThree\n</code></pre>\n<p>Looking at the <code>tests</code> folder, there is a <code>TestIndexFour</code>. This index is not loaded unless explicitly asked.</p>\n<h1 id=\"executing-a-search\">Executing a search <a class=\"heading-anchor-permalink\" href=\"#executing-a-search\">#</a></h1>\n<p>To search, here’s an example using all the features, and set the resulting outcome from the search\non the current <code>Controller</code> to be useable in the templates.</p>\n<pre><code class=\"language-php\">class SearchController extends PageController\n{\n    /**\n     * @param array $data Data from the submission\n     * @param SearchForm $form Submitted search form\n     * @return $this\n     */\n    public function searchMyContent($data, $form)\n    {\n        $searchVars = $this-&gt;getRequest()-&gt;getVars();\n        if (!empty($searchVars)) {\n            $this-&gt;setQuery($searchVars);\n            /** @var BaseIndex $index */\n            $index = Injector::inst()-&gt;get(MyIndex::class);\n    \n            // Start building the query, by adding the query term\n            $query = new BaseQuery();\n            $query-&gt;addTerm($searchVars['Query']);\n    \n            // Set the facets\n            $query-&gt;setFacetsMinCount(1);\n            $facetedFields = $index-&gt;getFacetFields();\n            foreach ($facetedFields as $className =&gt; $field) {\n                if (!empty($data[$field['Title']])) {\n                    $query-&gt;addFacetFilter($field['Title'], $data[$field['Title']]);\n                }\n            }\n    \n            // Set the startpoint of the results\n            $offset = $this-&gt;getRequest()-&gt;getVar('start') ?: 0;\n            $query-&gt;setStart($offset);\n    \n            // Assuming &quot;Order&quot; is your query parameter that defines the sort order\n            $sort = isset($data['Order']) ? strtolower($data['Order']) : 'asc';\n    \n            // Set the sorting. This can be an array of multiple sorts\n            $params['sort'] = MySortableClass::class . '_Created ' . $sort;\n            $query-&gt;setSort($params);\n    \n            // Execute the search\n            $result = $index-&gt;doSearch($query);\n    \n            // Set the query, possibly to be used to display it back to the user\n            $this-&gt;setQuery($searchVars);\n            // Set the total items found\n            $this-&gt;setTotal($result-&gt;Matches-&gt;totalItems);\n            // Set the results on the Controller\n            $this-&gt;setResults($result-&gt;Matches);\n            // If there is some spellchecking, set it to be used in the template\n            $this-&gt;setSpellcheck($result-&gt;Spellcheck);\n            // Set the list of facets\n            $this-&gt;setFacets($result-&gt;Facets);\n        }\n    \n        return $this;\n    }\n}\n</code></pre>\n<p><strong>NOTE</strong></p>\n<p>This is so called “pseudo code”, it may not exactly work, but serves as example.</p>\n<hr>\n<p><sup>1</sup> Although not required, it’s highly recomended</p>\n<p><sup>2</sup> The second option of an array can be omitted and directly given the boost value</p>\n",
      "id": 3
    },
    {
      "path": "04-Advanced-Options/01-Faceting.md",
      "url": "04-Advanced-Options/01-Faceting.html",
      "content": "# Faceting\n\n## What are facets\n\nFacets are related topics, e.g. when you have categories in your blogposts, faceting allows\nyou to show the categories that are in your search results.\n\nFor example, if you have 10 posts in \"Example category\" and 20 posts in \"Example category 2\",\nand the search returns 15 posts, 8 of those are in the \"Example category\" and 12 of those are (also)\nin the \"Example category 2\", you can show a list like so:\n- Example category (8)\n- Example category 2 (12)\n\nThis helps your visitors to narrow their search, for only a specific category.\n\n## Applying facets\n\nTo configure Facets, have a look at the [usage](../03-Usage.md) documentation.\n\nTo use them, this example should get you started:\n\n```php\n    $data = Controller::curr()->getRequest()->getVars();\n    $index = Injector::inst()->get(MyIndex::class);\n    $query = Injector::inst()->get(BaseQuery::class);\n    $facetedFields = $index->getFacetFields();\n    foreach ($facetedFields as $className => $field) {\n        // Title of your field, as defined in the FacetFields\n        if (!empty($data[$field['Title']])) {\n            // Add a facet filter with its title and the value from the request data\n            $query->addFacetFilter($field['Title'], $data[$field['Title']]);\n        }\n    }\n```\n\nThis will add filters, so only applicable categories are searched through.\n\nMake sure your Facet Fields are set correctly, as per the documentation.\n\nAny variable from your request, that is not a valid Facet will be ignored.",
      "html": "<h1 id=\"faceting\">Faceting <a class=\"heading-anchor-permalink\" href=\"#faceting\">#</a></h1>\n<h2 id=\"what-are-facets\">What are facets <a class=\"heading-anchor-permalink\" href=\"#what-are-facets\">#</a></h2>\n<p>Facets are related topics, e.g. when you have categories in your blogposts, faceting allows\nyou to show the categories that are in your search results.</p>\n<p>For example, if you have 10 posts in “Example category” and 20 posts in “Example category 2”,\nand the search returns 15 posts, 8 of those are in the “Example category” and 12 of those are (also)\nin the “Example category 2”, you can show a list like so:</p>\n<ul>\n<li>Example category (8)</li>\n<li>Example category 2 (12)</li>\n</ul>\n<p>This helps your visitors to narrow their search, for only a specific category.</p>\n<h2 id=\"applying-facets\">Applying facets <a class=\"heading-anchor-permalink\" href=\"#applying-facets\">#</a></h2>\n<p>To configure Facets, have a look at the <a href=\"../03-Usage.html\">usage</a> documentation.</p>\n<p>To use them, this example should get you started:</p>\n<pre><code class=\"language-php\">    $data = Controller::curr()-&gt;getRequest()-&gt;getVars();\n    $index = Injector::inst()-&gt;get(MyIndex::class);\n    $query = Injector::inst()-&gt;get(BaseQuery::class);\n    $facetedFields = $index-&gt;getFacetFields();\n    foreach ($facetedFields as $className =&gt; $field) {\n        // Title of your field, as defined in the FacetFields\n        if (!empty($data[$field['Title']])) {\n            // Add a facet filter with its title and the value from the request data\n            $query-&gt;addFacetFilter($field['Title'], $data[$field['Title']]);\n        }\n    }\n</code></pre>\n<p>This will add filters, so only applicable categories are searched through.</p>\n<p>Make sure your Facet Fields are set correctly, as per the documentation.</p>\n<p>Any variable from your request, that is not a valid Facet will be ignored.</p>\n",
      "id": 4
    },
    {
      "path": "04-Advanced-Options/02-Boosting.md",
      "url": "04-Advanced-Options/02-Boosting.html",
      "content": "# Boost queries\n\nBoosting can be done at both Index time if the configuration supports it, or at Query time.\n\nTo boost a certain query at Query time (easiest), use the following syntax:\n\n```php\n    $query->addBoostedField('Field_Name', $value);\n```\n\nWhere value is the boosting value.\n\n## Boosting a single term out of a set\n\nTo boost a single term specifically, or on a specific field, you can use the following:\n\n```php\n$query->addTerm('My search terms', ['Fields', 'To', 'Boost', 'On'], 2);\n```\n\nWhere the array of fields should not be empty. The number `2` is the amount of boosting that should be applied\nto the fields in the array.\n\nThis executes a global search for the term, followed by a boosting for each field in the\nfield array with a boost status of 2.\n\nNote that the boosted fields do need to be added as a boosted field at Configure time.",
      "html": "<h1 id=\"boost-queries\">Boost queries <a class=\"heading-anchor-permalink\" href=\"#boost-queries\">#</a></h1>\n<p>Boosting can be done at both Index time if the configuration supports it, or at Query time.</p>\n<p>To boost a certain query at Query time (easiest), use the following syntax:</p>\n<pre><code class=\"language-php\">    $query-&gt;addBoostedField('Field_Name', $value);\n</code></pre>\n<p>Where value is the boosting value.</p>\n<h2 id=\"boosting-a-single-term-out-of-a-set\">Boosting a single term out of a set <a class=\"heading-anchor-permalink\" href=\"#boosting-a-single-term-out-of-a-set\">#</a></h2>\n<p>To boost a single term specifically, or on a specific field, you can use the following:</p>\n<pre><code class=\"language-php\">$query-&gt;addTerm('My search terms', ['Fields', 'To', 'Boost', 'On'], 2);\n</code></pre>\n<p>Where the array of fields should not be empty. The number <code>2</code> is the amount of boosting that should be applied\nto the fields in the array.</p>\n<p>This executes a global search for the term, followed by a boosting for each field in the\nfield array with a boost status of 2.</p>\n<p>Note that the boosted fields do need to be added as a boosted field at Configure time.</p>\n",
      "id": 5
    },
    {
      "path": "04-Advanced-Options/03-Fuzzy-search.md",
      "url": "04-Advanced-Options/03-Fuzzy-search.html",
      "content": "# Fuzzyness\n\nFuzzyness can be set at query time, to search a range of similar query terms.\n\nTo use fuzzyness, here's an example:\n\n```php\n$query->addTerm('SearchTerm', [], [], 5);\n```\n\nThis example would add a fuzzyness of 5 to the query.",
      "html": "<h1 id=\"fuzzyness\">Fuzzyness <a class=\"heading-anchor-permalink\" href=\"#fuzzyness\">#</a></h1>\n<p>Fuzzyness can be set at query time, to search a range of similar query terms.</p>\n<p>To use fuzzyness, here’s an example:</p>\n<pre><code class=\"language-php\">$query-&gt;addTerm('SearchTerm', [], [], 5);\n</code></pre>\n<p>This example would add a fuzzyness of 5 to the query.</p>\n",
      "id": 6
    },
    {
      "path": "04-Advanced-Options/04-Elevation.md",
      "url": "04-Advanced-Options/04-Elevation.html",
      "content": "# Elevation\n\nTo promote certain results over others, Elevation is a work in progress.\n\n## Why use elevation\n\nIf you need to put a certain page above another for certain search queries, you should use\nelevation.\n\nAn example of this is a webshop. As a shop, you want the results for the products to appear\nabove the results for a Warranty page for said product. To improve sales.\n\nElevation is just what you need for that.\n\n### NOTE\nElevation is currently a work in progress and not yet available for the general public.\nHave a look at [Elevation WIP](https://github.com/Firesphere/silverstripe-solr-search/pull/56) for more details.",
      "html": "<h1 id=\"elevation\">Elevation <a class=\"heading-anchor-permalink\" href=\"#elevation\">#</a></h1>\n<p>To promote certain results over others, Elevation is a work in progress.</p>\n<h2 id=\"why-use-elevation\">Why use elevation <a class=\"heading-anchor-permalink\" href=\"#why-use-elevation\">#</a></h2>\n<p>If you need to put a certain page above another for certain search queries, you should use\nelevation.</p>\n<p>An example of this is a webshop. As a shop, you want the results for the products to appear\nabove the results for a Warranty page for said product. To improve sales.</p>\n<p>Elevation is just what you need for that.</p>\n<h3 id=\"note\">NOTE <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h3>\n<p>Elevation is currently a work in progress and not yet available for the general public.\nHave a look at <a href=\"https://github.com/Firesphere/silverstripe-solr-search/pull/56\">Elevation WIP</a> for more details.</p>\n",
      "id": 7
    },
    {
      "path": "05-Customisation.md",
      "url": "05-Customisation.html",
      "content": "# Customisation\n\nAll steps of the process, from index to searching, have extension points.\n\nThese extension points can be used to alter or update the respective steps\n\nAvailable extension points:\n\n| Method | Used for | Available on |\n|-|-|-|\n| `onBeforeSolrConfigureTask` | Alter the Configuration before uploading the configuration | `SolrConfigureTask` |\n| `onConfigureIndex` | Operates after an index is added | `SolrConfigureTask` |\n| `onAfterSolrConfigureTask` | Executes after Solr is configured. Can be used to check if the configuration is added for example | `SolrConfigureTask` |\n| `onBeforeConfig` | Operates before a configuration is uploaded | `SolrConfigureTask` |\n| `onBeforeInit` | Update initialisation features | `BaseIndex` |\n| `onAfterInit` | Update initialisation features | `BaseIndex` |\n| `onBeforeSearch` | Before executing the search, update the query | `BaseIndex` |\n| `onAfterSearch` | Manipulate the results | `BaseIndex` |\n| `updateSearchResults` | Manipulate the returned result object | `BaseIndex` |\n",
      "html": "<h1 id=\"customisation\">Customisation <a class=\"heading-anchor-permalink\" href=\"#customisation\">#</a></h1>\n<p>All steps of the process, from index to searching, have extension points.</p>\n<p>These extension points can be used to alter or update the respective steps</p>\n<p>Available extension points:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Used for</th>\n<th>Available on</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onBeforeSolrConfigureTask</code></td>\n<td>Alter the Configuration before uploading the configuration</td>\n<td><code>SolrConfigureTask</code></td>\n</tr>\n<tr>\n<td><code>onConfigureIndex</code></td>\n<td>Operates after an index is added</td>\n<td><code>SolrConfigureTask</code></td>\n</tr>\n<tr>\n<td><code>onAfterSolrConfigureTask</code></td>\n<td>Executes after Solr is configured. Can be used to check if the configuration is added for example</td>\n<td><code>SolrConfigureTask</code></td>\n</tr>\n<tr>\n<td><code>onBeforeConfig</code></td>\n<td>Operates before a configuration is uploaded</td>\n<td><code>SolrConfigureTask</code></td>\n</tr>\n<tr>\n<td><code>onBeforeInit</code></td>\n<td>Update initialisation features</td>\n<td><code>BaseIndex</code></td>\n</tr>\n<tr>\n<td><code>onAfterInit</code></td>\n<td>Update initialisation features</td>\n<td><code>BaseIndex</code></td>\n</tr>\n<tr>\n<td><code>onBeforeSearch</code></td>\n<td>Before executing the search, update the query</td>\n<td><code>BaseIndex</code></td>\n</tr>\n<tr>\n<td><code>onAfterSearch</code></td>\n<td>Manipulate the results</td>\n<td><code>BaseIndex</code></td>\n</tr>\n<tr>\n<td><code>updateSearchResults</code></td>\n<td>Manipulate the returned result object</td>\n<td><code>BaseIndex</code></td>\n</tr>\n</tbody>\n</table>\n",
      "id": 8
    },
    {
      "path": "06-CMS-Usage.md",
      "url": "06-CMS-Usage.html",
      "content": "# CMS Usage\n\nSee the Search admin in the CMS\n\n## Features\n- See if there are any applicable dirty objects to re-index\n- See the latest Solr logs\n- Add, remove or edit Synonyms\n    - Note that YML based synonyms can not be edited from the CMS\n",
      "html": "<h1 id=\"cms-usage\">CMS Usage <a class=\"heading-anchor-permalink\" href=\"#cms-usage\">#</a></h1>\n<p>See the Search admin in the CMS</p>\n<h2 id=\"features\">Features <a class=\"heading-anchor-permalink\" href=\"#features\">#</a></h2>\n<ul>\n<li>See if there are any applicable dirty objects to re-index</li>\n<li>See the latest Solr logs</li>\n<li>Add, remove or edit Synonyms\n<ul>\n<li>Note that YML based synonyms can not be edited from the CMS</li>\n</ul>\n</li>\n</ul>\n",
      "id": 9
    },
    {
      "path": "07-Debugging.md",
      "url": "07-Debugging.html",
      "content": "# Debugging\n\nTo debug the executed query, the `BaseIndex` has a method available to show you all the components of the executed query \nas an array. To get this data, execute the following after you have done your search:\n- `$index->getQueryTerms()` To get the query terms\n\nThe Index also has a method to get the Query Factory and read data from there.\nYou can find the output of the factory by getting\n- `$index->getQueryFactory()`. See the [API documentation](https://firesphere.github.io/solr-api/classes/Firesphere.SolrSearch.Factories.QueryComponentFactory.html) on how to address each part of the factory.\n\nThrough the use of an `Extension` on `BaseIndex` you can get the Factory through the method `onBeforeSearch`\n\nThese two methods supply more information about the executed query.\n\nFor a more thorough debugging, have a look at the [Solarium docs](https://solarium.readthedocs.io/en/stable/queries/select-query/building-a-select-query/components/debug-component/) for getting the debugging information.\n\n# Logging\n\nEvery error triggers the SolrLogger, to retrieve the errors from Solr and store them in the database.\n\nThese error logs are deletable only in dev mode or by administrators.\n\nThe logs can be found at `admin/searchadmin/Firesphere-SolrSearch-Models-SolrLog` for checking what is wrong.\n\n## Clearing out the logs\n\nAs an admin, you should have access to `dev/tasks`, where an option to truncate the log database is available at\n`dev/tasks/SolrClearErrorsTask`. Use this with caution though, as it will truncate the errors logged and no data remains\nat all.\n\nIt is strongly advised to only clear out the logs if they have all been reviewed and you are sure nothing serious is wrong.\n\n## x:Unknown indexes\n\nBecause Solr 5 and lower don't return the actual core that threw the error, logging will say `x:Unknown`. This does not mean\nthe log is not there, it means the core that threw the error isn't known by the server.\n\n## Sorting\n\nBy default, SilverStripe sorts by ID, causing the oldest errors to show first. Advised is to sort by Timestamp before looking at the actual error.\n\n## Colour codes\n\nThe gridfield is colour coded for the type of error. This can be disabled by overriding the GridFieldExtension class and removing\nany classes that are unwished for.\n",
      "html": "<h1 id=\"debugging\">Debugging <a class=\"heading-anchor-permalink\" href=\"#debugging\">#</a></h1>\n<p>To debug the executed query, the <code>BaseIndex</code> has a method available to show you all the components of the executed query\nas an array. To get this data, execute the following after you have done your search:</p>\n<ul>\n<li><code>$index-&gt;getQueryTerms()</code> To get the query terms</li>\n</ul>\n<p>The Index also has a method to get the Query Factory and read data from there.\nYou can find the output of the factory by getting</p>\n<ul>\n<li><code>$index-&gt;getQueryFactory()</code>. See the <a href=\"https://firesphere.github.io/solr-api/classes/Firesphere.SolrSearch.Factories.QueryComponentFactory.html\">API documentation</a> on how to address each part of the factory.</li>\n</ul>\n<p>Through the use of an <code>Extension</code> on <code>BaseIndex</code> you can get the Factory through the method <code>onBeforeSearch</code></p>\n<p>These two methods supply more information about the executed query.</p>\n<p>For a more thorough debugging, have a look at the <a href=\"https://solarium.readthedocs.io/en/stable/queries/select-query/building-a-select-query/components/debug-component/\">Solarium docs</a> for getting the debugging information.</p>\n<h1 id=\"logging\">Logging <a class=\"heading-anchor-permalink\" href=\"#logging\">#</a></h1>\n<p>Every error triggers the SolrLogger, to retrieve the errors from Solr and store them in the database.</p>\n<p>These error logs are deletable only in dev mode or by administrators.</p>\n<p>The logs can be found at <code>admin/searchadmin/Firesphere-SolrSearch-Models-SolrLog</code> for checking what is wrong.</p>\n<h2 id=\"clearing-out-the-logs\">Clearing out the logs <a class=\"heading-anchor-permalink\" href=\"#clearing-out-the-logs\">#</a></h2>\n<p>As an admin, you should have access to <code>dev/tasks</code>, where an option to truncate the log database is available at\n<code>dev/tasks/SolrClearErrorsTask</code>. Use this with caution though, as it will truncate the errors logged and no data remains\nat all.</p>\n<p>It is strongly advised to only clear out the logs if they have all been reviewed and you are sure nothing serious is wrong.</p>\n<h2 id=\"x%3Aunknown-indexes\">x:Unknown indexes <a class=\"heading-anchor-permalink\" href=\"#x%3Aunknown-indexes\">#</a></h2>\n<p>Because Solr 5 and lower don’t return the actual core that threw the error, logging will say <code>x:Unknown</code>. This does not mean\nthe log is not there, it means the core that threw the error isn’t known by the server.</p>\n<h2 id=\"sorting\">Sorting <a class=\"heading-anchor-permalink\" href=\"#sorting\">#</a></h2>\n<p>By default, SilverStripe sorts by ID, causing the oldest errors to show first. Advised is to sort by Timestamp before looking at the actual error.</p>\n<h2 id=\"colour-codes\">Colour codes <a class=\"heading-anchor-permalink\" href=\"#colour-codes\">#</a></h2>\n<p>The gridfield is colour coded for the type of error. This can be disabled by overriding the GridFieldExtension class and removing\nany classes that are unwished for.</p>\n",
      "id": 10
    },
    {
      "path": "08-Suggestions.md",
      "url": "08-Suggestions.html",
      "content": "# Solr Suggest\n\nIf you are using Solr5 or above, you can use the Solr Suggest option. This is enabled by default.\n\nTo set this up, have a look at [autosuggest proxy](https://github.com/Firesphere/silverstripe-solr-search/blob/master/client/proxy/autosuggest.php)\n\nCopy this file to a convenient location, e.g. your `docroot/public` folder and edit the contents of your copy, to match your Solr core and location of the Solr instance.\n\nNote that the proxy can not read from the Silverstripe config, thus it needs to be edited manually.\n\nOnce that's in place, you can use javascript to get Solr's suggestions, by querying the autosuggest.php file directly.\n\nYou need to query the file directly, to prevent a full execution of the whole Silverstripe stack, which is too slow for proper auto suggesting.\nAlso, make sure the file is accessible.\n\nThe output of the file is a JSON object, looking something like this:\n```json\n{\n\n    \"responseHeader\": {\n        \"status\": 0,\n        \"QTime\": 0\n    },\n    \"suggest\": {\n        \"Suggester\": {\n            \"home\": {\n                \"numFound\": 10,\n                \"suggestions\": [\n                    {\n                        \"term\": \"home\",\n                        \"weight\": 376,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homeajaxaction\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebartonvillevpsbartonvilletccommysitecodememberextensionphp\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homeblauwboomdomainsmyserverpublichtmlcompframeworksrci\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrew\",\n                        \"weight\": 26,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewcurlother\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewhttpsbrewsh\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewing\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebridgewillstaginpublichtmlsilvershopcodecartordertotalcalculatorphp\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homecategorycategory\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\nWhich you can then use in your javascript to populate a dropdown.\n\n## Security note\n\nAs the query is passed straight in to Solr, there is no option of database SQL injection.\n",
      "html": "<h1 id=\"solr-suggest\">Solr Suggest <a class=\"heading-anchor-permalink\" href=\"#solr-suggest\">#</a></h1>\n<p>If you are using Solr5 or above, you can use the Solr Suggest option. This is enabled by default.</p>\n<p>To set this up, have a look at <a href=\"https://github.com/Firesphere/silverstripe-solr-search/blob/master/client/proxy/autosuggest.php\">autosuggest proxy</a></p>\n<p>Copy this file to a convenient location, e.g. your <code>docroot/public</code> folder and edit the contents of your copy, to match your Solr core and location of the Solr instance.</p>\n<p>Note that the proxy can not read from the Silverstripe config, thus it needs to be edited manually.</p>\n<p>Once that’s in place, you can use javascript to get Solr’s suggestions, by querying the autosuggest.php file directly.</p>\n<p>You need to query the file directly, to prevent a full execution of the whole Silverstripe stack, which is too slow for proper auto suggesting.\nAlso, make sure the file is accessible.</p>\n<p>The output of the file is a JSON object, looking something like this:</p>\n<pre><code class=\"language-json\">{\n\n    &quot;responseHeader&quot;: {\n        &quot;status&quot;: 0,\n        &quot;QTime&quot;: 0\n    },\n    &quot;suggest&quot;: {\n        &quot;Suggester&quot;: {\n            &quot;home&quot;: {\n                &quot;numFound&quot;: 10,\n                &quot;suggestions&quot;: [\n                    {\n                        &quot;term&quot;: &quot;home&quot;,\n                        &quot;weight&quot;: 376,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homeajaxaction&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebartonvillevpsbartonvilletccommysitecodememberextensionphp&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homeblauwboomdomainsmyserverpublichtmlcompframeworksrci&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrew&quot;,\n                        &quot;weight&quot;: 26,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewcurlother&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewhttpsbrewsh&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewing&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebridgewillstaginpublichtmlsilvershopcodecartordertotalcalculatorphp&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homecategorycategory&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    }\n                ]\n            }\n        }\n    }\n}\n</code></pre>\n<p>Which you can then use in your javascript to populate a dropdown.</p>\n<h2 id=\"security-note\">Security note <a class=\"heading-anchor-permalink\" href=\"#security-note\">#</a></h2>\n<p>As the query is passed straight in to Solr, there is no option of database SQL injection.</p>\n",
      "id": 11
    },
    {
      "path": "09-View-Permissions.md",
      "url": "09-View-Permissions.html",
      "content": "# Viewing permissions\n\nView permissions are indexed group based and setting based.\n\nOn page level, this means if it's public, the view will be indexed as `'null'`, meaning anyone can see.\nInheritance is calculated, and if it is logged in only, then only logged in members will be able to see it.\n\nIf it's specific groups, then these groups are indexed.\n\n## More granular approaches\n\nIn case you have custom `canView()` implementations, we strongly suggest using `InheritedPermissionsExtension` and proper\npermission implementations instead.\n\nThe reason for not using custom `Member` based permission checks, is because when a site has a lot of members, indexing\nand the granular approach would become incredibly complex and long. Possibly causing errors during indexing.\n",
      "html": "<h1 id=\"viewing-permissions\">Viewing permissions <a class=\"heading-anchor-permalink\" href=\"#viewing-permissions\">#</a></h1>\n<p>View permissions are indexed group based and setting based.</p>\n<p>On page level, this means if it’s public, the view will be indexed as <code>'null'</code>, meaning anyone can see.\nInheritance is calculated, and if it is logged in only, then only logged in members will be able to see it.</p>\n<p>If it’s specific groups, then these groups are indexed.</p>\n<h2 id=\"more-granular-approaches\">More granular approaches <a class=\"heading-anchor-permalink\" href=\"#more-granular-approaches\">#</a></h2>\n<p>In case you have custom <code>canView()</code> implementations, we strongly suggest using <code>InheritedPermissionsExtension</code> and proper\npermission implementations instead.</p>\n<p>The reason for not using custom <code>Member</code> based permission checks, is because when a site has a lot of members, indexing\nand the granular approach would become incredibly complex and long. Possibly causing errors during indexing.</p>\n",
      "id": 12
    },
    {
      "path": "10-Dirty-classes.md",
      "url": "10-Dirty-classes.html",
      "content": "# Dirty Classes\n\nThe module keeps a record of the classes that failed to successfully (re-)index.\nFor this purpose, there is a `ClearDirtyClassesJob` and `ClearDirtyClassesTask`. The\ntask should run on a regular basis, depending on how often items in the index are updated\nin the CMS.\n\nThe job is to make it easier for CMS users to execute the task.\n",
      "html": "<h1 id=\"dirty-classes\">Dirty Classes <a class=\"heading-anchor-permalink\" href=\"#dirty-classes\">#</a></h1>\n<p>The module keeps a record of the classes that failed to successfully (re-)index.\nFor this purpose, there is a <code>ClearDirtyClassesJob</code> and <code>ClearDirtyClassesTask</code>. The\ntask should run on a regular basis, depending on how often items in the index are updated\nin the CMS.</p>\n<p>The job is to make it easier for CMS users to execute the task.</p>\n",
      "id": 13
    },
    {
      "path": "11-Submodules/01-Fulltext-Search-Compatibility.md",
      "url": "11-Submodules/01-Fulltext-Search-Compatibility.html",
      "content": "# Fulltext Search\\* Compatibility\n\nTo minimise the impact of migrating, there is a compatibility module available.\n[This module](https://github.com/Firesphere/silverstripe-solr-compatibility) will remove the need to completely update all your indexes.\nA few small changes to your Search Controller and Results template may be needed however.\n\nThe primary difference between FTS and this module is the way it's configured. Therefore some stubs are available in the compatibility module.\nYou can find this compatibility module here: https://github.com/Firesphere/silverstripe-solr-compatibility\n\n## Init to YML\n\nTo get the `init()` method to a YML, the module provides a helper function. This requires the [PHP module `php_yaml`](https://www.php.net/manual/en/book.yaml.php) to be installed.\n\nEasiest to get the YML is to do in your `PageController::init()`\n\n```php\n$index = new MyIndexClass();\n$index->initToYml();\n```\n\n## Stubs\n\n| Method | Stub for | Calls | Purpose |\n|-|-|-|-|\n| `FulltextSearchExtension::search()` | `doSearch()` | `BaseIndex::doSearch()` | Prevent errors from calling the old method |\n| `FulltextSearchExtension::updateSearchResults()` | None | None | Return an `ArrayData::class` instead of a `SearchResult::class` |\n| `SearchQuery::addSearchTerm()` | `addTerm()` | `BaseQuery::addTerm()` | Stub for old `addSearchTerm` method |\n| `SearchQuery::setLimit()` | `setRows()` | `BaseQuery::setRows()` | Help prevent errors moving from `Limit` to `Rows` | \n| `SearchQuery::getLimit()` | `getRows()` | `BaseQuery::setRows()` | Help prevent errors moving from `Limit` to `Rows` |\n| `Solr::configure_server()` | Configuration | None | Old way of configuring support |\n| `SolrIndex::getIndexName()` | New naming convention | None | Prevent errors moving from the old automated naming to the required naming |\n\n#### Note\n\nWhen upgrading your Solr instance from Solr4 to Solr5+, a full index will be needed regardless.\n\n----------\n\n\\* From here on called \"FTS\"\n",
      "html": "<h1 id=\"fulltext-search*-compatibility\">Fulltext Search* Compatibility <a class=\"heading-anchor-permalink\" href=\"#fulltext-search*-compatibility\">#</a></h1>\n<p>To minimise the impact of migrating, there is a compatibility module available.\n<a href=\"https://github.com/Firesphere/silverstripe-solr-compatibility\">This module</a> will remove the need to completely update all your indexes.\nA few small changes to your Search Controller and Results template may be needed however.</p>\n<p>The primary difference between FTS and this module is the way it’s configured. Therefore some stubs are available in the compatibility module.\nYou can find this compatibility module here: <a href=\"https://github.com/Firesphere/silverstripe-solr-compatibility\">https://github.com/Firesphere/silverstripe-solr-compatibility</a></p>\n<h2 id=\"init-to-yml\">Init to YML <a class=\"heading-anchor-permalink\" href=\"#init-to-yml\">#</a></h2>\n<p>To get the <code>init()</code> method to a YML, the module provides a helper function. This requires the <a href=\"https://www.php.net/manual/en/book.yaml.php\">PHP module <code>php_yaml</code></a> to be installed.</p>\n<p>Easiest to get the YML is to do in your <code>PageController::init()</code></p>\n<pre><code class=\"language-php\">$index = new MyIndexClass();\n$index-&gt;initToYml();\n</code></pre>\n<h2 id=\"stubs\">Stubs <a class=\"heading-anchor-permalink\" href=\"#stubs\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Stub for</th>\n<th>Calls</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>FulltextSearchExtension::search()</code></td>\n<td><code>doSearch()</code></td>\n<td><code>BaseIndex::doSearch()</code></td>\n<td>Prevent errors from calling the old method</td>\n</tr>\n<tr>\n<td><code>FulltextSearchExtension::updateSearchResults()</code></td>\n<td>None</td>\n<td>None</td>\n<td>Return an <code>ArrayData::class</code> instead of a <code>SearchResult::class</code></td>\n</tr>\n<tr>\n<td><code>SearchQuery::addSearchTerm()</code></td>\n<td><code>addTerm()</code></td>\n<td><code>BaseQuery::addTerm()</code></td>\n<td>Stub for old <code>addSearchTerm</code> method</td>\n</tr>\n<tr>\n<td><code>SearchQuery::setLimit()</code></td>\n<td><code>setRows()</code></td>\n<td><code>BaseQuery::setRows()</code></td>\n<td>Help prevent errors moving from <code>Limit</code> to <code>Rows</code></td>\n</tr>\n<tr>\n<td><code>SearchQuery::getLimit()</code></td>\n<td><code>getRows()</code></td>\n<td><code>BaseQuery::setRows()</code></td>\n<td>Help prevent errors moving from <code>Limit</code> to <code>Rows</code></td>\n</tr>\n<tr>\n<td><code>Solr::configure_server()</code></td>\n<td>Configuration</td>\n<td>None</td>\n<td>Old way of configuring support</td>\n</tr>\n<tr>\n<td><code>SolrIndex::getIndexName()</code></td>\n<td>New naming convention</td>\n<td>None</td>\n<td>Prevent errors moving from the old automated naming to the required naming</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"note\">Note <a class=\"heading-anchor-permalink\" href=\"#note\">#</a></h4>\n<p>When upgrading your Solr instance from Solr4 to Solr5+, a full index will be needed regardless.</p>\n<hr>\n<p>* From here on called “FTS”</p>\n",
      "id": 14
    },
    {
      "path": "11-Submodules/02-Subsites.md",
      "url": "11-Submodules/02-Subsites.html",
      "content": "# Subsites submodule\n\nWith the [Subsites submodule](https://github.com/Firesphere/silverstripe-subsite-solr), searching split between Subsites is automatically handled.\n\nIndexing by SubsiteID etc. is also automatically added to the appropriate parts of the indexing.\n",
      "html": "<h1 id=\"subsites-submodule\">Subsites submodule <a class=\"heading-anchor-permalink\" href=\"#subsites-submodule\">#</a></h1>\n<p>With the <a href=\"https://github.com/Firesphere/silverstripe-subsite-solr\">Subsites submodule</a>, searching split between Subsites is automatically handled.</p>\n<p>Indexing by SubsiteID etc. is also automatically added to the appropriate parts of the indexing.</p>\n",
      "id": 15
    },
    {
      "path": "11-Submodules/03-Fluent.md",
      "url": "11-Submodules/03-Fluent.html",
      "content": "# Fluent submodule\n\nWith the [Fluent submodule](https://github.com/Firesphere/silverstripe-fluent-solr), languages are separately indexed.\nThis means you don't have to worry about if the results have the right language settings.\n\n## Known issues\n\nGlobal, non-language specific search is not functional yet.\n",
      "html": "<h1 id=\"fluent-submodule\">Fluent submodule <a class=\"heading-anchor-permalink\" href=\"#fluent-submodule\">#</a></h1>\n<p>With the <a href=\"https://github.com/Firesphere/silverstripe-fluent-solr\">Fluent submodule</a>, languages are separately indexed.\nThis means you don’t have to worry about if the results have the right language settings.</p>\n<h2 id=\"known-issues\">Known issues <a class=\"heading-anchor-permalink\" href=\"#known-issues\">#</a></h2>\n<p>Global, non-language specific search is not functional yet.</p>\n",
      "id": 16
    },
    {
      "path": "11-Submodules/04-Member-based-permissions.md",
      "url": "11-Submodules/04-Member-based-permissions.html",
      "content": "# [Member based indexing](https://github.com/Firesphere/silverstripe-solr-member-permissions)\n\nBy default, indexing of permissions is based on groups. If you want or need member specific, say, for each member\nthe index should check if the permission is correct, you'll need the [Member based submodule](https://github.com/Firesphere/silverstripe-solr-member-permissions).\n\n**IMPORTANT**\n\nThis submodule is work in progress\n\n## Functionality\n\nThis module removes the filtering on Groups and replaces it with per-member statusses, to validate if a member\ncurrently logged in can view objects at index time.\n\nDuring query time, this module replaces the Group based view filter with Member specific view status checks.\n\n## Notes\n\nThis module is not the suggested way to filter by view status. Group view is a lot more effecient.\n",
      "html": "<h1 id=\"member-based-indexing\"><a href=\"https://github.com/Firesphere/silverstripe-solr-member-permissions\">Member based indexing</a> <a class=\"heading-anchor-permalink\" href=\"#member-based-indexing\">#</a></h1>\n<p>By default, indexing of permissions is based on groups. If you want or need member specific, say, for each member\nthe index should check if the permission is correct, you’ll need the <a href=\"https://github.com/Firesphere/silverstripe-solr-member-permissions\">Member based submodule</a>.</p>\n<p><strong>IMPORTANT</strong></p>\n<p>This submodule is work in progress</p>\n<h2 id=\"functionality\">Functionality <a class=\"heading-anchor-permalink\" href=\"#functionality\">#</a></h2>\n<p>This module removes the filtering on Groups and replaces it with per-member statusses, to validate if a member\ncurrently logged in can view objects at index time.</p>\n<p>During query time, this module replaces the Group based view filter with Member specific view status checks.</p>\n<h2 id=\"notes\">Notes <a class=\"heading-anchor-permalink\" href=\"#notes\">#</a></h2>\n<p>This module is not the suggested way to filter by view status. Group view is a lot more effecient.</p>\n",
      "id": 17
    },
    {
      "path": "11-Submodules/05-Elemental.md",
      "url": "11-Submodules/05-Elemental.html",
      "content": "# Elemental indexes\n\nIndexing Elemental is quite tricky, as Elements are part of the content, but can also be standalone.\n\nThere are a few options to index Elements as part of the page:\n\n## Through Elemental provided method\n\n```yaml\nFiresphere\\SolrSearch\\Indexes\\BaseIndex:\n  MyIndexName:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Title\n      - ElementsForSearch\n```\n\n## Index elements specifically\n\n```yaml\nFiresphere\\SolrSearch\\Indexes\\BaseIndex:\n  MyIndexName:\n    Classes:\n      - DNADesign\\Elemental\\Models\\BaseElement\n    FulltextFields:\n      - Title\n      - forTemplate\n```\n\nThis will index Elements with their title and rendered content. \n",
      "html": "<h1 id=\"elemental-indexes\">Elemental indexes <a class=\"heading-anchor-permalink\" href=\"#elemental-indexes\">#</a></h1>\n<p>Indexing Elemental is quite tricky, as Elements are part of the content, but can also be standalone.</p>\n<p>There are a few options to index Elements as part of the page:</p>\n<h2 id=\"through-elemental-provided-method\">Through Elemental provided method <a class=\"heading-anchor-permalink\" href=\"#through-elemental-provided-method\">#</a></h2>\n<pre><code class=\"language-yaml\">Firesphere\\SolrSearch\\Indexes\\BaseIndex:\n  MyIndexName:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Title\n      - ElementsForSearch\n</code></pre>\n<h2 id=\"index-elements-specifically\">Index elements specifically <a class=\"heading-anchor-permalink\" href=\"#index-elements-specifically\">#</a></h2>\n<pre><code class=\"language-yaml\">Firesphere\\SolrSearch\\Indexes\\BaseIndex:\n  MyIndexName:\n    Classes:\n      - DNADesign\\Elemental\\Models\\BaseElement\n    FulltextFields:\n      - Title\n      - forTemplate\n</code></pre>\n<p>This will index Elements with their title and rendered content.</p>\n",
      "id": 18
    },
    {
      "path": "12-Contributing/01-Code-of-Conduct.md",
      "url": "12-Contributing/01-Code-of-Conduct.html",
      "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at github@casa-laguna.net. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n",
      "html": "<h1 id=\"contributor-covenant-code-of-conduct\">Contributor Covenant Code of Conduct <a class=\"heading-anchor-permalink\" href=\"#contributor-covenant-code-of-conduct\">#</a></h1>\n<h2 id=\"our-pledge\">Our Pledge <a class=\"heading-anchor-permalink\" href=\"#our-pledge\">#</a></h2>\n<p>In the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.</p>\n<h2 id=\"our-standards\">Our Standards <a class=\"heading-anchor-permalink\" href=\"#our-standards\">#</a></h2>\n<p>Examples of behavior that contributes to creating a positive environment\ninclude:</p>\n<ul>\n<li>Using welcoming and inclusive language</li>\n<li>Being respectful of differing viewpoints and experiences</li>\n<li>Gracefully accepting constructive criticism</li>\n<li>Focusing on what is best for the community</li>\n<li>Showing empathy towards other community members</li>\n</ul>\n<p>Examples of unacceptable behavior by participants include:</p>\n<ul>\n<li>The use of sexualized language or imagery and unwelcome sexual attention or\nadvances</li>\n<li>Trolling, insulting/derogatory comments, and personal or political attacks</li>\n<li>Public or private harassment</li>\n<li>Publishing others’ private information, such as a physical or electronic\naddress, without explicit permission</li>\n<li>Other conduct which could reasonably be considered inappropriate in a\nprofessional setting</li>\n</ul>\n<h2 id=\"our-responsibilities\">Our Responsibilities <a class=\"heading-anchor-permalink\" href=\"#our-responsibilities\">#</a></h2>\n<p>Project maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.</p>\n<p>Project maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.</p>\n<h2 id=\"scope\">Scope <a class=\"heading-anchor-permalink\" href=\"#scope\">#</a></h2>\n<p>This Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.</p>\n<h2 id=\"enforcement\">Enforcement <a class=\"heading-anchor-permalink\" href=\"#enforcement\">#</a></h2>\n<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <a href=\"mailto:github@casa-laguna.net\">github@casa-laguna.net</a>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.</p>\n<p>Project maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project’s leadership.</p>\n<h2 id=\"attribution\">Attribution <a class=\"heading-anchor-permalink\" href=\"#attribution\">#</a></h2>\n<p>This Code of Conduct is adapted from the <a href=\"https://www.contributor-covenant.org\">Contributor Covenant</a>, version 1.4,\navailable at <a href=\"https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\">https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</a></p>\n<p>For answers to common questions about this code of conduct, see\n<a href=\"https://www.contributor-covenant.org/faq\">https://www.contributor-covenant.org/faq</a></p>\n",
      "id": 19
    },
    {
      "path": "12-Contributing/02-Contributing.md",
      "url": "12-Contributing/02-Contributing.html",
      "content": "# Contributing\n\nAny open source product is only as good as the community behind it. You can participate by sharing code, ideas, or simply helping others. No matter what your skill level is, every contribution counts.\n\n * [Sharing your opinion and raising issues](http://docs.silverstripe.org/en/4/contributing/issues_and_bugs/)\n * [Providing code, whether it's creating a feature or fixing a bug](https://docs.silverstripe.org/en/4/contributing/code/)\n\n## Signing commits\n\nIt is highly recommended to sign commits with your PGP key to ensure integrity.\n\n# Further notes\n\nParts of this contributing guidelines are taken from [Bitfield Script](https://github.com/bitfield/script/blob/master/CONTRIBUTING.md#Documentation)\n\n## Documentation\n\nIt doesn't matter if you write the greatest piece of code in the history of the world, if no one knows it exists, or how to use it.\nWrite doc comments\n\nAny functions or methods you write should have useful documentation comments in the standard PHP Docblock format. Specifically, they should say what inputs the function takes, what it does (in detail), and what outputs it returns. If it returns an error value, explain under what circumstances this happens.\n\nFor example:\n```php\n/**\n * Method to enable predictive search\n * Gives the user a prediction on what it is trying to search for\n * @param string $searchTerm\n * @return ArrayList\n */\n```\nThis is the whole user manual for your code. It will be included in the autogenerated documentation for the whole package. Remember that readers will often see it without the accompanying code, so it needs to make sense on its own.\n\n## Write a use case\n\nThis is probably the most important thing to bear in mind. A great design principle for software libraries is \nto start with a real-world use case, and try to implement it using the feature you have in mind. \nNo issues or PRs will be accepted into this module without an accompanying use case (See the project board). \nAnd I hold myself to that rule just as much as anybody else.\n\nWhat do I mean by \"use case\"? I mean a real problem that you or someone else actually has, that could be solved using the feature. \nFor example, you might think it's a very cool idea to add a Frobnicate() method to this module. \nMaybe it is, but what's it for? Where would this be used in the real world? Can you give an example of a \nproblem that could be solved by a program using Frobnicate()? If so, what would the program look like?\n\nThe reason for insisting on this up front is that it's much easier to design a feature the right way if you start \nwith its usage in mind. It's all too easy to design something in the abstract, and then find later that when you \ntry to use it in a program, the API is completely unsuitable.\n\nAnother reason for having a use case is that it gives us a useful example program,\nwhich can be included with the library to show how the feature is used.\n\nThe final reason is that it's tempting to over-elaborate a design and add all sorts of bells and whistles\nthat nobody actually wants. Simple APIs are best. If you think of an enhancement, \nbut it's not needed for your use case, leave it out. Things can always be enhanced later if necessary.\n\n## Update the docs\n\nAny change to the API should also be accompanied by an update to the docs. \nIf you add a new method, add it in the appropriate place (sources, filters, etc.), \nin its correct order alphabetically, and with a suitable (brief) example of its use.\n\n# Before submitting your pull request\n\nHere's a handy checklist for making sure your PR will be accepted as quickly as possible.\n\n - [ ] Have you opened an issue to discuss the feature and agree its general design?\n - [ ] Do you have a use case and, ideally, an example program using the feature?\n - [ ] Do you have tests covering 90%+ of the feature code (and, of course passing)\n - [ ] Have you written complete and accurate doc comments?\n - [ ] Have you updated the README, Documentation and its table of contents?\n - [ ] You rock. Thanks a lot.\n\n# After submitting your PR\n\nHere's a nice tip for PR-driven development in general. After you've submitted the PR, do a 'pre-code-review'. \nGo through the diffs, line by line, and be your own code reviewer. Does something look weird? \nIs something not quite straightforward? It's quite likely that you'll spot errors at this stage which you missed before, \nsimply because you're looking at the code with a reviewer's mindset.\n\nIf so, fix them! But if you can foresee a question from a code reviewer, comment on the code to answer it in advance. \n(Even better, improve the code so that the question doesn't arise.)\n\n# The code review process\n\nIf you've completed all these steps, I _will_ invest significant time and energy in giving your PR a detailed code review. \nThis is a powerful and beneficial process which can not only improve the code, but can also help you learn to be a better \nengineer and a better Go programmer—and the same goes for me!\n\n## Expect to be taken seriously\n\nDon't think of code review as a \"you got this wrong, fix it\" kind of conversation (this isn't a helpful review comment). \nInstead, think of it as a discussion where both sides can ask questions, make suggestions, clarify problems and misunderstandings, \ncatch mistakes, and add improvements.\n\nYou shouldn't be disappointed if you don't get a simple 'LGTM' and an instant merge. \nIf this is what you're used to, then your team isn't really doing code review to its full potential. \nInstead, the more comments you get, the more seriously it means I'm taking your work. Where appropriate, \nI'll say what I liked as well as what I'd like to see improved.\n\n## Dealing with comments\n\nNow comes the tricky bit. You may not agree with some of the code review comments. \nReviewing code is a delicate business in the first place, requiring diplomacy as well as discretion, \nbut responding to code reviews is also a skilled task.\n\nIf you find yourself reacting emotionally, take a break. Go walk in the woods for a while, \nor play with a laughing child. When you come back to the code, approach it as though it were someone else's, \nnot your own, and ask yourself seriously whether or not the reviewer _has a point_.\n\nIf you genuinely think the reviewer has just misunderstood something, or made a mistake, \ntry to clarify the issue. Ask questions, don't make accusations. Remember that every project has a certain way of doing things, \nwhich may not be your way. It's polite to go along with these practices and conventions.\n\nYou may feel as though you're doing the project maintainer a favour by contributing, as indeed you are, \nbut an open source project is like somebody's home. They're used to living there, they probably like it the way it is, \nand they don't always respond well to strangers marching in and rearranging the furniture. \n\nBe considerate, and be willing to listen and make changes.\n\n## This may take a while\n\nDon't be impatient. We've all had the experience of sending in our beautifully-crafted PR and then waiting, waiting, waiting. \nWhy won't those idiots just merge it? How come other issues and PRs are getting dealt with ahead of mine? Am I invisible?\n\nIn fact, doing a _proper_ and serious code review is a time-consuming business. It's not just a case of skim-reading the diffs. \nThe reviewer will need to check out your branch, run the tests, think carefully about what you've done, \nmake suggestions, test alternatives. It's almost as much work as writing the PR in the first place.\n\nOpen source maintainers are just regular folk with jobs, kids, and zero free time or energy. \nThey may not be able to drop everything and put in several hours on your PR. \nThe task may have to wait a week or two until they can get sufficient time and peace and quiet to work on it. \nDon't pester them. It's fine to add a comment on the PR if you haven't heard anything for a while, \nasking if the reviewer's been able to look at it and whether there's anything you can do to help speed things up. \nComments like 'Y U NO MERGE' are unlikely to elicit a positive response.\n\nThanks again for helping out!\n",
      "html": "<h1 id=\"contributing\">Contributing <a class=\"heading-anchor-permalink\" href=\"#contributing\">#</a></h1>\n<p>Any open source product is only as good as the community behind it. You can participate by sharing code, ideas, or simply helping others. No matter what your skill level is, every contribution counts.</p>\n<ul>\n<li><a href=\"http://docs.silverstripe.org/en/4/contributing/issues_and_bugs/\">Sharing your opinion and raising issues</a></li>\n<li><a href=\"https://docs.silverstripe.org/en/4/contributing/code/\">Providing code, whether it’s creating a feature or fixing a bug</a></li>\n</ul>\n<h2 id=\"signing-commits\">Signing commits <a class=\"heading-anchor-permalink\" href=\"#signing-commits\">#</a></h2>\n<p>It is highly recommended to sign commits with your PGP key to ensure integrity.</p>\n<h1 id=\"further-notes\">Further notes <a class=\"heading-anchor-permalink\" href=\"#further-notes\">#</a></h1>\n<p>Parts of this contributing guidelines are taken from <a href=\"https://github.com/bitfield/script/blob/master/CONTRIBUTING.md#Documentation\">Bitfield Script</a></p>\n<h2 id=\"documentation\">Documentation <a class=\"heading-anchor-permalink\" href=\"#documentation\">#</a></h2>\n<p>It doesn’t matter if you write the greatest piece of code in the history of the world, if no one knows it exists, or how to use it.\nWrite doc comments</p>\n<p>Any functions or methods you write should have useful documentation comments in the standard PHP Docblock format. Specifically, they should say what inputs the function takes, what it does (in detail), and what outputs it returns. If it returns an error value, explain under what circumstances this happens.</p>\n<p>For example:</p>\n<pre><code class=\"language-php\">/**\n * Method to enable predictive search\n * Gives the user a prediction on what it is trying to search for\n * @param string $searchTerm\n * @return ArrayList\n */\n</code></pre>\n<p>This is the whole user manual for your code. It will be included in the autogenerated documentation for the whole package. Remember that readers will often see it without the accompanying code, so it needs to make sense on its own.</p>\n<h2 id=\"write-a-use-case\">Write a use case <a class=\"heading-anchor-permalink\" href=\"#write-a-use-case\">#</a></h2>\n<p>This is probably the most important thing to bear in mind. A great design principle for software libraries is\nto start with a real-world use case, and try to implement it using the feature you have in mind.\nNo issues or PRs will be accepted into this module without an accompanying use case (See the project board).\nAnd I hold myself to that rule just as much as anybody else.</p>\n<p>What do I mean by “use case”? I mean a real problem that you or someone else actually has, that could be solved using the feature.\nFor example, you might think it’s a very cool idea to add a Frobnicate() method to this module.\nMaybe it is, but what’s it for? Where would this be used in the real world? Can you give an example of a\nproblem that could be solved by a program using Frobnicate()? If so, what would the program look like?</p>\n<p>The reason for insisting on this up front is that it’s much easier to design a feature the right way if you start\nwith its usage in mind. It’s all too easy to design something in the abstract, and then find later that when you\ntry to use it in a program, the API is completely unsuitable.</p>\n<p>Another reason for having a use case is that it gives us a useful example program,\nwhich can be included with the library to show how the feature is used.</p>\n<p>The final reason is that it’s tempting to over-elaborate a design and add all sorts of bells and whistles\nthat nobody actually wants. Simple APIs are best. If you think of an enhancement,\nbut it’s not needed for your use case, leave it out. Things can always be enhanced later if necessary.</p>\n<h2 id=\"update-the-docs\">Update the docs <a class=\"heading-anchor-permalink\" href=\"#update-the-docs\">#</a></h2>\n<p>Any change to the API should also be accompanied by an update to the docs.\nIf you add a new method, add it in the appropriate place (sources, filters, etc.),\nin its correct order alphabetically, and with a suitable (brief) example of its use.</p>\n<h1 id=\"before-submitting-your-pull-request\">Before submitting your pull request <a class=\"heading-anchor-permalink\" href=\"#before-submitting-your-pull-request\">#</a></h1>\n<p>Here’s a handy checklist for making sure your PR will be accepted as quickly as possible.</p>\n<ul>\n<li>[ ] Have you opened an issue to discuss the feature and agree its general design?</li>\n<li>[ ] Do you have a use case and, ideally, an example program using the feature?</li>\n<li>[ ] Do you have tests covering 90%+ of the feature code (and, of course passing)</li>\n<li>[ ] Have you written complete and accurate doc comments?</li>\n<li>[ ] Have you updated the README, Documentation and its table of contents?</li>\n<li>[ ] You rock. Thanks a lot.</li>\n</ul>\n<h1 id=\"after-submitting-your-pr\">After submitting your PR <a class=\"heading-anchor-permalink\" href=\"#after-submitting-your-pr\">#</a></h1>\n<p>Here’s a nice tip for PR-driven development in general. After you’ve submitted the PR, do a ‘pre-code-review’.\nGo through the diffs, line by line, and be your own code reviewer. Does something look weird?\nIs something not quite straightforward? It’s quite likely that you’ll spot errors at this stage which you missed before,\nsimply because you’re looking at the code with a reviewer’s mindset.</p>\n<p>If so, fix them! But if you can foresee a question from a code reviewer, comment on the code to answer it in advance.\n(Even better, improve the code so that the question doesn’t arise.)</p>\n<h1 id=\"the-code-review-process\">The code review process <a class=\"heading-anchor-permalink\" href=\"#the-code-review-process\">#</a></h1>\n<p>If you’ve completed all these steps, I <em>will</em> invest significant time and energy in giving your PR a detailed code review.\nThis is a powerful and beneficial process which can not only improve the code, but can also help you learn to be a better\nengineer and a better Go programmer—and the same goes for me!</p>\n<h2 id=\"expect-to-be-taken-seriously\">Expect to be taken seriously <a class=\"heading-anchor-permalink\" href=\"#expect-to-be-taken-seriously\">#</a></h2>\n<p>Don’t think of code review as a “you got this wrong, fix it” kind of conversation (this isn’t a helpful review comment).\nInstead, think of it as a discussion where both sides can ask questions, make suggestions, clarify problems and misunderstandings,\ncatch mistakes, and add improvements.</p>\n<p>You shouldn’t be disappointed if you don’t get a simple ‘LGTM’ and an instant merge.\nIf this is what you’re used to, then your team isn’t really doing code review to its full potential.\nInstead, the more comments you get, the more seriously it means I’m taking your work. Where appropriate,\nI’ll say what I liked as well as what I’d like to see improved.</p>\n<h2 id=\"dealing-with-comments\">Dealing with comments <a class=\"heading-anchor-permalink\" href=\"#dealing-with-comments\">#</a></h2>\n<p>Now comes the tricky bit. You may not agree with some of the code review comments.\nReviewing code is a delicate business in the first place, requiring diplomacy as well as discretion,\nbut responding to code reviews is also a skilled task.</p>\n<p>If you find yourself reacting emotionally, take a break. Go walk in the woods for a while,\nor play with a laughing child. When you come back to the code, approach it as though it were someone else’s,\nnot your own, and ask yourself seriously whether or not the reviewer <em>has a point</em>.</p>\n<p>If you genuinely think the reviewer has just misunderstood something, or made a mistake,\ntry to clarify the issue. Ask questions, don’t make accusations. Remember that every project has a certain way of doing things,\nwhich may not be your way. It’s polite to go along with these practices and conventions.</p>\n<p>You may feel as though you’re doing the project maintainer a favour by contributing, as indeed you are,\nbut an open source project is like somebody’s home. They’re used to living there, they probably like it the way it is,\nand they don’t always respond well to strangers marching in and rearranging the furniture.</p>\n<p>Be considerate, and be willing to listen and make changes.</p>\n<h2 id=\"this-may-take-a-while\">This may take a while <a class=\"heading-anchor-permalink\" href=\"#this-may-take-a-while\">#</a></h2>\n<p>Don’t be impatient. We’ve all had the experience of sending in our beautifully-crafted PR and then waiting, waiting, waiting.\nWhy won’t those idiots just merge it? How come other issues and PRs are getting dealt with ahead of mine? Am I invisible?</p>\n<p>In fact, doing a <em>proper</em> and serious code review is a time-consuming business. It’s not just a case of skim-reading the diffs.\nThe reviewer will need to check out your branch, run the tests, think carefully about what you’ve done,\nmake suggestions, test alternatives. It’s almost as much work as writing the PR in the first place.</p>\n<p>Open source maintainers are just regular folk with jobs, kids, and zero free time or energy.\nThey may not be able to drop everything and put in several hours on your PR.\nThe task may have to wait a week or two until they can get sufficient time and peace and quiet to work on it.\nDon’t pester them. It’s fine to add a comment on the PR if you haven’t heard anything for a while,\nasking if the reviewer’s been able to look at it and whether there’s anything you can do to help speed things up.\nComments like ‘Y U NO MERGE’ are unlikely to elicit a positive response.</p>\n<p>Thanks again for helping out!</p>\n",
      "id": 20
    },
    {
      "path": "13-Help/01-Changelog.md",
      "url": "13-Help/01-Changelog.html",
      "content": "# Changelog\n\n## 1.0 beta\n\n- Fixes to the CMS Index Job.\n- Fix issue #140 User not reset correctly.\n- Fix issue #143 Not showing in search wasn't cleaned out correctly.\n- Improved documentation.\n- Fix stemming issues not properly stemming.\n- Fix test errors.\n- Fix `schema.xml` construction.\n- [Change of Permission indexing from User based to Group based](../09-View-Permissions.md).\n- Improved documentation.\n- Removed history, moving to a later phase to include in a sub-module.\n- Fix issues encountered for Dirty classes and Indexing\n- Improved `PCNTL` detection for the CMS run of the Indexing job\n\n## 0.9.x\n\n- Documentation updates.\n- Bump the version to leave bugs behind.\n\n## 0.8.x\n\n- Use multi-threaded indexing.\n- Fix error with buffer adding.\n- Initial Synonym support.\n\n## 0.7.5 Notable updates\n\n- Added `Add[X]Fields()`.\n- Fix spellcheck retry.\n- Increased test coverage.\n- Support for basic Fluent (select your language for each indexing run).\n- Documentation.\n- Extracted compatibility to separate module.\n\n## 0.5 First release\n\n- Use Solarium.\n- Support Facets.\n- Support terms.\n- Support boosting.\n- Support filtering/excluding.\n- Support highlighting.\n- Support elevation.\n- Simplified API.\n- Fulltext Search compatibility.\n",
      "html": "<h1 id=\"changelog\">Changelog <a class=\"heading-anchor-permalink\" href=\"#changelog\">#</a></h1>\n<h2 id=\"1.0-beta\">1.0 beta <a class=\"heading-anchor-permalink\" href=\"#1.0-beta\">#</a></h2>\n<ul>\n<li>Fixes to the CMS Index Job.</li>\n<li>Fix issue #140 User not reset correctly.</li>\n<li>Fix issue #143 Not showing in search wasn’t cleaned out correctly.</li>\n<li>Improved documentation.</li>\n<li>Fix stemming issues not properly stemming.</li>\n<li>Fix test errors.</li>\n<li>Fix <code>schema.xml</code> construction.</li>\n<li><a href=\"../09-View-Permissions.html\">Change of Permission indexing from User based to Group based</a>.</li>\n<li>Improved documentation.</li>\n<li>Removed history, moving to a later phase to include in a sub-module.</li>\n<li>Fix issues encountered for Dirty classes and Indexing</li>\n<li>Improved <code>PCNTL</code> detection for the CMS run of the Indexing job</li>\n</ul>\n<h2 id=\"0.9.x\">0.9.x <a class=\"heading-anchor-permalink\" href=\"#0.9.x\">#</a></h2>\n<ul>\n<li>Documentation updates.</li>\n<li>Bump the version to leave bugs behind.</li>\n</ul>\n<h2 id=\"0.8.x\">0.8.x <a class=\"heading-anchor-permalink\" href=\"#0.8.x\">#</a></h2>\n<ul>\n<li>Use multi-threaded indexing.</li>\n<li>Fix error with buffer adding.</li>\n<li>Initial Synonym support.</li>\n</ul>\n<h2 id=\"0.7.5-notable-updates\">0.7.5 Notable updates <a class=\"heading-anchor-permalink\" href=\"#0.7.5-notable-updates\">#</a></h2>\n<ul>\n<li>Added <code>Add[X]Fields()</code>.</li>\n<li>Fix spellcheck retry.</li>\n<li>Increased test coverage.</li>\n<li>Support for basic Fluent (select your language for each indexing run).</li>\n<li>Documentation.</li>\n<li>Extracted compatibility to separate module.</li>\n</ul>\n<h2 id=\"0.5-first-release\">0.5 First release <a class=\"heading-anchor-permalink\" href=\"#0.5-first-release\">#</a></h2>\n<ul>\n<li>Use Solarium.</li>\n<li>Support Facets.</li>\n<li>Support terms.</li>\n<li>Support boosting.</li>\n<li>Support filtering/excluding.</li>\n<li>Support highlighting.</li>\n<li>Support elevation.</li>\n<li>Simplified API.</li>\n<li>Fulltext Search compatibility.</li>\n</ul>\n",
      "id": 21
    },
    {
      "path": "13-Help/02-FAQ.md",
      "url": "13-Help/02-FAQ.html",
      "content": "# FAQ\n\n### What do you mean not fast enough?\n\nAll indexing, as well as the search, require disk space. If the disk can not respond fast enough to a write,\neither PHP or Java will stop and throw an error\n\n### Do you support synonyms\n\nYes! Including US to UK spelling synonyms by default!\n\n### Fast?\n\nYes, very fast\n\n### Compatible with the Fulltext Search Module?\n\n99% and counting, does that work for you? Have a look at the compatibility module\n\n### Why do I need to name my index?\n\nYou have a name yourself, don't you? It makes sense to name the index too.\n\n### Only File storage?\n\nHold your horses, this is a beta stage project, more storage options to come!\n\n### My core.properties won't persist, what gives?\n\nMost likely, you're running a vagrant or docker machine? And even more likely\nrunning it on Linux.\n\nThe solution is to create a symlink in `/var/solr/data/{your-policy-name/` to `/var/www/{yoursite}/.solr/conf`, so the\n`conf` folder points to your locally writable folder for Vagrant.\n\nIn your search.yml, add the following as the location of your FileStore config:\n```yaml\nFiresphere\\SolrSearch\\Services\\SolrCoreService:\n  store:\n    mode: 'file'\n    path: '/var/solr/data'\n```\n\nThat way, Solr will write it's own files to the correct core folder where it can write, but your config can still live\ninside your project.\n\n### I would like a feature to be added!\n\nI would like an issue to be created\n\n### Dealing with errors\n\nEspecially when using facets, you should not redeclare fields to be filterable as well. If you run in to an error \nsaying you have duplicate fields, check your configuration that e.g. FilterFields does not have an overlap with FacetFields, etc.\n\n# GitStore\n\nAs you may know, Open Source Software is written by volunteers. We volunteer our time, to work\non software a lot.\n\nBut, by doing such, we do not have time for other things to relax. Which causes friction.\n\nIf you can afford it, we would appreciate it a lot if you would sponsor us through GitStore.\n\n## But your software is free and open\n\nYes, but that does not mean it doesn't cost us time to respond to issues, look at pull requests\nor even support you with problems outside of the module. (A common one is Solr and Linux permission failures).\n\nWe do not mind helping you. But we have put a lot of time and effort in to writing software\nthat is useful to you, the community. We ask you, could you give something back? It is not mandatory,\nof course.\n\nWe will add you to the list of sponsors, if you decide to pay for this work.",
      "html": "<h1 id=\"faq\">FAQ <a class=\"heading-anchor-permalink\" href=\"#faq\">#</a></h1>\n<h3 id=\"what-do-you-mean-not-fast-enough%3F\">What do you mean not fast enough? <a class=\"heading-anchor-permalink\" href=\"#what-do-you-mean-not-fast-enough%3F\">#</a></h3>\n<p>All indexing, as well as the search, require disk space. If the disk can not respond fast enough to a write,\neither PHP or Java will stop and throw an error</p>\n<h3 id=\"do-you-support-synonyms\">Do you support synonyms <a class=\"heading-anchor-permalink\" href=\"#do-you-support-synonyms\">#</a></h3>\n<p>Yes! Including US to UK spelling synonyms by default!</p>\n<h3 id=\"fast%3F\">Fast? <a class=\"heading-anchor-permalink\" href=\"#fast%3F\">#</a></h3>\n<p>Yes, very fast</p>\n<h3 id=\"compatible-with-the-fulltext-search-module%3F\">Compatible with the Fulltext Search Module? <a class=\"heading-anchor-permalink\" href=\"#compatible-with-the-fulltext-search-module%3F\">#</a></h3>\n<p>99% and counting, does that work for you? Have a look at the compatibility module</p>\n<h3 id=\"why-do-i-need-to-name-my-index%3F\">Why do I need to name my index? <a class=\"heading-anchor-permalink\" href=\"#why-do-i-need-to-name-my-index%3F\">#</a></h3>\n<p>You have a name yourself, don’t you? It makes sense to name the index too.</p>\n<h3 id=\"only-file-storage%3F\">Only File storage? <a class=\"heading-anchor-permalink\" href=\"#only-file-storage%3F\">#</a></h3>\n<p>Hold your horses, this is a beta stage project, more storage options to come!</p>\n<h3 id=\"my-core.properties-won%E2%80%99t-persist%2C-what-gives%3F\">My core.properties won’t persist, what gives? <a class=\"heading-anchor-permalink\" href=\"#my-core.properties-won%E2%80%99t-persist%2C-what-gives%3F\">#</a></h3>\n<p>Most likely, you’re running a vagrant or docker machine? And even more likely\nrunning it on Linux.</p>\n<p>The solution is to create a symlink in <code>/var/solr/data/{your-policy-name/</code> to <code>/var/www/{yoursite}/.solr/conf</code>, so the\n<code>conf</code> folder points to your locally writable folder for Vagrant.</p>\n<p>In your search.yml, add the following as the location of your FileStore config:</p>\n<pre><code class=\"language-yaml\">Firesphere\\SolrSearch\\Services\\SolrCoreService:\n  store:\n    mode: 'file'\n    path: '/var/solr/data'\n</code></pre>\n<p>That way, Solr will write it’s own files to the correct core folder where it can write, but your config can still live\ninside your project.</p>\n<h3 id=\"i-would-like-a-feature-to-be-added!\">I would like a feature to be added! <a class=\"heading-anchor-permalink\" href=\"#i-would-like-a-feature-to-be-added!\">#</a></h3>\n<p>I would like an issue to be created</p>\n<h3 id=\"dealing-with-errors\">Dealing with errors <a class=\"heading-anchor-permalink\" href=\"#dealing-with-errors\">#</a></h3>\n<p>Especially when using facets, you should not redeclare fields to be filterable as well. If you run in to an error\nsaying you have duplicate fields, check your configuration that e.g. FilterFields does not have an overlap with FacetFields, etc.</p>\n<h1 id=\"gitstore\">GitStore <a class=\"heading-anchor-permalink\" href=\"#gitstore\">#</a></h1>\n<p>As you may know, Open Source Software is written by volunteers. We volunteer our time, to work\non software a lot.</p>\n<p>But, by doing such, we do not have time for other things to relax. Which causes friction.</p>\n<p>If you can afford it, we would appreciate it a lot if you would sponsor us through GitStore.</p>\n<h2 id=\"but-your-software-is-free-and-open\">But your software is free and open <a class=\"heading-anchor-permalink\" href=\"#but-your-software-is-free-and-open\">#</a></h2>\n<p>Yes, but that does not mean it doesn’t cost us time to respond to issues, look at pull requests\nor even support you with problems outside of the module. (A common one is Solr and Linux permission failures).</p>\n<p>We do not mind helping you. But we have put a lot of time and effort in to writing software\nthat is useful to you, the community. We ask you, could you give something back? It is not mandatory,\nof course.</p>\n<p>We will add you to the list of sponsors, if you decide to pay for this work.</p>\n",
      "id": 22
    },
    {
      "path": "13-Help/03-Known-issues.md",
      "url": "13-Help/03-Known-issues.html",
      "content": "# Known issues\n\n## Database errors\n\nDid you do a build?\n\n`https://yourdomain.com/dev/build?flush=all`\n\nIt is known that the final index might throw a MySQL Exception.\nThis is expected at the moment, and sadly, unavoidable so far.\nIf you have a solution, we would love to hear from you!\n\n\n## Linux hosts\n\nThere is a known issue with Linux hosts. Solr does not have\nthe correct write permissions, and Apache does not have the correct write permissions either.\n\nThis can be resolved by setting the folder of your Solr Core to `/var/solr/data`.\n\nThen, create the following subfolders in the data folder:\n- `YourCoreName/conf`\n- `YourCoreName/data`\n\nThen, add the `solr` user to the `apache` group (or `www-data`)\nAnd the other way around, add apache to solr.\n\nChange the ownership of the whole `YourCoreName` folder to `solr:apache`.\n\nChange the permissions on `YourCoreName/conf` to be `777`.\n\nThis should, in theory, resolve your permission errors.\n\nThese errors are _not_ related to this module, but on how Vagrant is set up on Linux.\n\n**NOTE**\n\nThe name of your apache user could be different, so make sure you get it right.\nAfter updating the group permissions, be sure to log out and back in again.\n\n## Solr and Vagrant issues\n\nIt's also known that Solr won't properly reload cores on Vagrant VM's. This is outside\nof control for this module, it is advised to restart Solr before and after a config change.\n\n## Solr is running as the wrong user\n\nFor yet unknown reasons, even after following the Solr installation guide, it may happen\nthat Solr runs as the wrong user.\n\nIf this happens, the best course of action is to stop Solr and start it with the correct user:\n`cd /opt/solr-8.3.1 && sudo -u solr ./bin/solr start`\n\nWhere `8.3.1` should reflect your current Solr version. Or, if you've allowed Solr to create\nsymlinks, the path could be `/opt/solr`.\n\n## Facets do not show anymore since the latest version\n\nYep, the `XML` switch to non-deprecated options, which causes facets and filters to not work properly anymore.\nPlease re-index your Solr Core `vendor/bin/sake dev/tasks/SolrConfigureTask flush=all` followed\nby `vendor/bin/sake dev/tasks/SolrIndexTask` from terminal is the most efficient way.\n\nThis is caused by a deprecated change in the Integer field on Solr level and can not be fixed in any\nother way.\n\n## Localhost?\n\nYes, for now, the config requires the host's name to be `localhost`. This is not exactly by choice,\nbut due to how Solarium works. Stay tuned for updates.\n\n## My config is written to the wrong folder (`.solr`)\n\nThis is probably due to an older version of this module, that had this bug. Please upgrade.\n\n## I can't get it to work on Live or UAT\n\nWe're very sorry, but deployments of Solr differ so much per deployment, that we can't\ngive any solid advice.\n\nThe best answer right now is following these steps:\n- Install Solr as described in [Install Solr](../02-Solr.md)\n- Make sure the `data` folder is executable fully by Solr (`rxd` on Linux)\n- Make sure the `data/conf` folder is writeable by your PHP and the webserver (Apache2/Nginx/Caddy/Lighttpd etc.)\n- Run a local test of the live environment, ensuring all configs are good to go\n- If there are still errors, please contact your own sysadmin team first. They are most likely to be able to\nresolve the problem\n\n### To no avail, no solution worked\n\nIf it is related to the module, and not related to actual permissions or other server set-up issues, and you\n can not make a public issue, you can contact us at\n \n`solr[@]casa-laguna[.]net`\n\nPlease note that we may charge you for investigating and helping solve your issues. This module is FOSS, but\nour time is not unlimited and we may feel an issue is not worth the effort unless we get paid for our time.\n\n## Some groups give an error about `P` or `G`\n\nYes, a headscratcher! Re-run that specific group `SolrIndexTask group={Group Number}` and all should be fine.\n\nSometimes, for unknown reason, the `POST` or `GET` part of the request string is included in the XML that is \nsent to Solr. We've not yet found a reason for how/why this is happening.",
      "html": "<h1 id=\"known-issues\">Known issues <a class=\"heading-anchor-permalink\" href=\"#known-issues\">#</a></h1>\n<h2 id=\"database-errors\">Database errors <a class=\"heading-anchor-permalink\" href=\"#database-errors\">#</a></h2>\n<p>Did you do a build?</p>\n<p><code>https://yourdomain.com/dev/build?flush=all</code></p>\n<p>It is known that the final index might throw a MySQL Exception.\nThis is expected at the moment, and sadly, unavoidable so far.\nIf you have a solution, we would love to hear from you!</p>\n<h2 id=\"linux-hosts\">Linux hosts <a class=\"heading-anchor-permalink\" href=\"#linux-hosts\">#</a></h2>\n<p>There is a known issue with Linux hosts. Solr does not have\nthe correct write permissions, and Apache does not have the correct write permissions either.</p>\n<p>This can be resolved by setting the folder of your Solr Core to <code>/var/solr/data</code>.</p>\n<p>Then, create the following subfolders in the data folder:</p>\n<ul>\n<li><code>YourCoreName/conf</code></li>\n<li><code>YourCoreName/data</code></li>\n</ul>\n<p>Then, add the <code>solr</code> user to the <code>apache</code> group (or <code>www-data</code>)\nAnd the other way around, add apache to solr.</p>\n<p>Change the ownership of the whole <code>YourCoreName</code> folder to <code>solr:apache</code>.</p>\n<p>Change the permissions on <code>YourCoreName/conf</code> to be <code>777</code>.</p>\n<p>This should, in theory, resolve your permission errors.</p>\n<p>These errors are <em>not</em> related to this module, but on how Vagrant is set up on Linux.</p>\n<p><strong>NOTE</strong></p>\n<p>The name of your apache user could be different, so make sure you get it right.\nAfter updating the group permissions, be sure to log out and back in again.</p>\n<h2 id=\"solr-and-vagrant-issues\">Solr and Vagrant issues <a class=\"heading-anchor-permalink\" href=\"#solr-and-vagrant-issues\">#</a></h2>\n<p>It’s also known that Solr won’t properly reload cores on Vagrant VM’s. This is outside\nof control for this module, it is advised to restart Solr before and after a config change.</p>\n<h2 id=\"solr-is-running-as-the-wrong-user\">Solr is running as the wrong user <a class=\"heading-anchor-permalink\" href=\"#solr-is-running-as-the-wrong-user\">#</a></h2>\n<p>For yet unknown reasons, even after following the Solr installation guide, it may happen\nthat Solr runs as the wrong user.</p>\n<p>If this happens, the best course of action is to stop Solr and start it with the correct user:\n<code>cd /opt/solr-8.3.1 &amp;&amp; sudo -u solr ./bin/solr start</code></p>\n<p>Where <code>8.3.1</code> should reflect your current Solr version. Or, if you’ve allowed Solr to create\nsymlinks, the path could be <code>/opt/solr</code>.</p>\n<h2 id=\"facets-do-not-show-anymore-since-the-latest-version\">Facets do not show anymore since the latest version <a class=\"heading-anchor-permalink\" href=\"#facets-do-not-show-anymore-since-the-latest-version\">#</a></h2>\n<p>Yep, the <code>XML</code> switch to non-deprecated options, which causes facets and filters to not work properly anymore.\nPlease re-index your Solr Core <code>vendor/bin/sake dev/tasks/SolrConfigureTask flush=all</code> followed\nby <code>vendor/bin/sake dev/tasks/SolrIndexTask</code> from terminal is the most efficient way.</p>\n<p>This is caused by a deprecated change in the Integer field on Solr level and can not be fixed in any\nother way.</p>\n<h2 id=\"localhost%3F\">Localhost? <a class=\"heading-anchor-permalink\" href=\"#localhost%3F\">#</a></h2>\n<p>Yes, for now, the config requires the host’s name to be <code>localhost</code>. This is not exactly by choice,\nbut due to how Solarium works. Stay tuned for updates.</p>\n<h2 id=\"my-config-is-written-to-the-wrong-folder-(.solr)\">My config is written to the wrong folder (<code>.solr</code>) <a class=\"heading-anchor-permalink\" href=\"#my-config-is-written-to-the-wrong-folder-(.solr)\">#</a></h2>\n<p>This is probably due to an older version of this module, that had this bug. Please upgrade.</p>\n<h2 id=\"i-can%E2%80%99t-get-it-to-work-on-live-or-uat\">I can’t get it to work on Live or UAT <a class=\"heading-anchor-permalink\" href=\"#i-can%E2%80%99t-get-it-to-work-on-live-or-uat\">#</a></h2>\n<p>We’re very sorry, but deployments of Solr differ so much per deployment, that we can’t\ngive any solid advice.</p>\n<p>The best answer right now is following these steps:</p>\n<ul>\n<li>Install Solr as described in <a href=\"../02-Solr.html\">Install Solr</a></li>\n<li>Make sure the <code>data</code> folder is executable fully by Solr (<code>rxd</code> on Linux)</li>\n<li>Make sure the <code>data/conf</code> folder is writeable by your PHP and the webserver (Apache2/Nginx/Caddy/Lighttpd etc.)</li>\n<li>Run a local test of the live environment, ensuring all configs are good to go</li>\n<li>If there are still errors, please contact your own sysadmin team first. They are most likely to be able to\nresolve the problem</li>\n</ul>\n<h3 id=\"to-no-avail%2C-no-solution-worked\">To no avail, no solution worked <a class=\"heading-anchor-permalink\" href=\"#to-no-avail%2C-no-solution-worked\">#</a></h3>\n<p>If it is related to the module, and not related to actual permissions or other server set-up issues, and you\ncan not make a public issue, you can contact us at</p>\n<p><code>solr[@]casa-laguna[.]net</code></p>\n<p>Please note that we may charge you for investigating and helping solve your issues. This module is FOSS, but\nour time is not unlimited and we may feel an issue is not worth the effort unless we get paid for our time.</p>\n<h2 id=\"some-groups-give-an-error-about-p-or-g\">Some groups give an error about <code>P</code> or <code>G</code> <a class=\"heading-anchor-permalink\" href=\"#some-groups-give-an-error-about-p-or-g\">#</a></h2>\n<p>Yes, a headscratcher! Re-run that specific group <code>SolrIndexTask group={Group Number}</code> and all should be fine.</p>\n<p>Sometimes, for unknown reason, the <code>POST</code> or <code>GET</code> part of the request string is included in the XML that is\nsent to Solr. We’ve not yet found a reason for how/why this is happening.</p>\n",
      "id": 23
    },
    {
      "path": "14-About/01-About.md",
      "url": "14-About/01-About.html",
      "content": "# About\n\nThis solr search module is aimed at a more modern, modular approach to searching with Solr, to replace the existing FTS module that has some shortcomings and problems with features that Solr does offer, but aren't supported.\n\nIt is maintained by:\n* Simon `Firesphere` Erkelens\n* Marco `Sheepy` Hermo\n",
      "html": "<h1 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h1>\n<p>This solr search module is aimed at a more modern, modular approach to searching with Solr, to replace the existing FTS module that has some shortcomings and problems with features that Solr does offer, but aren’t supported.</p>\n<p>It is maintained by:</p>\n<ul>\n<li>Simon <code>Firesphere</code> Erkelens</li>\n<li>Marco <code>Sheepy</code> Hermo</li>\n</ul>\n",
      "id": 24
    },
    {
      "path": "14-About/02-Coverage.md",
      "url": "14-About/02-Coverage.html",
      "content": "# [CodeClimate](https://codeclimate.com/github/Firesphere/silverstripe-solr-search)\n## Maintainability\n[![Maintainability](https://api.codeclimate.com/v1/badges/55c8967ef25e37182e3d/maintainability)](https://codeclimate.com/github/Firesphere/silverstripe-solr-search/maintainability)\n## Code coverage\n[![Test Coverage](https://api.codeclimate.com/v1/badges/55c8967ef25e37182e3d/test_coverage)](https://codeclimate.com/github/Firesphere/silverstripe-solr-search/test_coverage)\n# [Scrutinizer](https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/)\n## Quality\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/?branch=master)\n## Build status\n[![Build Status](https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/badges/build.png?b=master)](https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/build-status/master)\n# [CircleCI](https://app.circleci.com/github/Firesphere/silverstripe-solr-search/pipelines?branch=master)\n[![CircleCI](https://circleci.com/gh/Firesphere/silverstripe-solr-search/tree/master.svg?style=svg)](https://circleci.com/gh/Firesphere/silverstripe-solr-search/tree/master)\n# [CodeCov](https://codecov.io/gh/Firesphere/silverstripe-solr-search)\n[![codecov](https://codecov.io/gh/Firesphere/silverstripe-solr-search/branch/master/graph/badge.svg)](https://codecov.io/gh/Firesphere/silverstripe-solr-search)\n",
      "html": "<h1 id=\"codeclimate\"><a href=\"https://codeclimate.com/github/Firesphere/silverstripe-solr-search\">CodeClimate</a> <a class=\"heading-anchor-permalink\" href=\"#codeclimate\">#</a></h1>\n<h2 id=\"maintainability\">Maintainability <a class=\"heading-anchor-permalink\" href=\"#maintainability\">#</a></h2>\n<p><a href=\"https://codeclimate.com/github/Firesphere/silverstripe-solr-search/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/55c8967ef25e37182e3d/maintainability\" alt=\"Maintainability\"></a></p>\n<h2 id=\"code-coverage\">Code coverage <a class=\"heading-anchor-permalink\" href=\"#code-coverage\">#</a></h2>\n<p><a href=\"https://codeclimate.com/github/Firesphere/silverstripe-solr-search/test_coverage\"><img src=\"https://api.codeclimate.com/v1/badges/55c8967ef25e37182e3d/test_coverage\" alt=\"Test Coverage\"></a></p>\n<h1 id=\"scrutinizer\"><a href=\"https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/\">Scrutinizer</a> <a class=\"heading-anchor-permalink\" href=\"#scrutinizer\">#</a></h1>\n<h2 id=\"quality\">Quality <a class=\"heading-anchor-permalink\" href=\"#quality\">#</a></h2>\n<p><a href=\"https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/?branch=master\"><img src=\"https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/badges/quality-score.png?b=master\" alt=\"Scrutinizer Code Quality\"></a></p>\n<h2 id=\"build-status\">Build status <a class=\"heading-anchor-permalink\" href=\"#build-status\">#</a></h2>\n<p><a href=\"https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/build-status/master\"><img src=\"https://scrutinizer-ci.com/g/Firesphere/silverstripe-solr-search/badges/build.png?b=master\" alt=\"Build Status\"></a></p>\n<h1 id=\"circleci\"><a href=\"https://app.circleci.com/github/Firesphere/silverstripe-solr-search/pipelines?branch=master\">CircleCI</a> <a class=\"heading-anchor-permalink\" href=\"#circleci\">#</a></h1>\n<p><a href=\"https://circleci.com/gh/Firesphere/silverstripe-solr-search/tree/master\"><img src=\"https://circleci.com/gh/Firesphere/silverstripe-solr-search/tree/master.svg?style=svg\" alt=\"CircleCI\"></a></p>\n<h1 id=\"codecov\"><a href=\"https://codecov.io/gh/Firesphere/silverstripe-solr-search\">CodeCov</a> <a class=\"heading-anchor-permalink\" href=\"#codecov\">#</a></h1>\n<p><a href=\"https://codecov.io/gh/Firesphere/silverstripe-solr-search\"><img src=\"https://codecov.io/gh/Firesphere/silverstripe-solr-search/branch/master/graph/badge.svg\" alt=\"codecov\"></a></p>\n",
      "id": 25
    },
    {
      "path": "14-About/03-Codebase/01-Main-stats.md",
      "url": "14-About/03-Codebase/01-Main-stats.html",
      "content": "# Codebase statistics from PHP Lines of Code\n\n```\nphploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                         24\nFiles                                               47\n\nSize\n  Lines of Code (LOC)                             7630\n  Comment Lines of Code (CLOC)                    3215 (42.14%)\n  Non-Comment Lines of Code (NCLOC)               4415 (57.86%)\n  Logical Lines of Code (LLOC)                    1669 (21.87%)\n    Classes                                       1283 (76.87%)\n      Average Class Length                          27\n        Minimum Class Length                         1\n        Maximum Class Length                       100\n      Average Method Length                          3\n        Minimum Method Length                        1\n        Maximum Method Length                       15\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                    386 (23.13%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.17\n  Average Complexity per Class                    7.17\n    Minimum Class Complexity                      1.00\n    Maximum Class Complexity                     29.00\n  Average Complexity per Method                   1.88\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                               437\n    Non-Static                                     404 (92.45%)\n    Static                                          33 (7.55%)\n  Method Calls                                     773\n    Non-Static                                     594 (76.84%)\n    Static                                         179 (23.16%)\n\nStructure\n  Namespaces                                        16\n  Interfaces                                         2\n  Traits                                            16\n  Classes                                           29\n    Abstract Classes                                 2 (6.90%)\n    Concrete Classes                                27 (93.10%)\n  Methods                                          337\n    Scope\n      Non-Static Methods                           315 (93.47%)\n      Static Methods                                22 (6.53%)\n    Visibility\n      Public Methods                               251 (74.48%)\n      Non-Public Methods                            86 (25.52%)\n  Functions                                          2\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              2 (100.00%)\n  Constants                                          9\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  9 (100.00%)\n```\n",
      "html": "<h1 id=\"codebase-statistics-from-php-lines-of-code\">Codebase statistics from PHP Lines of Code <a class=\"heading-anchor-permalink\" href=\"#codebase-statistics-from-php-lines-of-code\">#</a></h1>\n<pre><code>phploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                         24\nFiles                                               47\n\nSize\n  Lines of Code (LOC)                             7630\n  Comment Lines of Code (CLOC)                    3215 (42.14%)\n  Non-Comment Lines of Code (NCLOC)               4415 (57.86%)\n  Logical Lines of Code (LLOC)                    1669 (21.87%)\n    Classes                                       1283 (76.87%)\n      Average Class Length                          27\n        Minimum Class Length                         1\n        Maximum Class Length                       100\n      Average Method Length                          3\n        Minimum Method Length                        1\n        Maximum Method Length                       15\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                    386 (23.13%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.17\n  Average Complexity per Class                    7.17\n    Minimum Class Complexity                      1.00\n    Maximum Class Complexity                     29.00\n  Average Complexity per Method                   1.88\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                               437\n    Non-Static                                     404 (92.45%)\n    Static                                          33 (7.55%)\n  Method Calls                                     773\n    Non-Static                                     594 (76.84%)\n    Static                                         179 (23.16%)\n\nStructure\n  Namespaces                                        16\n  Interfaces                                         2\n  Traits                                            16\n  Classes                                           29\n    Abstract Classes                                 2 (6.90%)\n    Concrete Classes                                27 (93.10%)\n  Methods                                          337\n    Scope\n      Non-Static Methods                           315 (93.47%)\n      Static Methods                                22 (6.53%)\n    Visibility\n      Public Methods                               251 (74.48%)\n      Non-Public Methods                            86 (25.52%)\n  Functions                                          2\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              2 (100.00%)\n  Constants                                          9\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  9 (100.00%)\n</code></pre>\n",
      "id": 26
    },
    {
      "path": "14-About/03-Codebase/02-Compatibility-stats.md",
      "url": "14-About/03-Codebase/02-Compatibility-stats.html",
      "content": "```\nphploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                4\n\nSize\n  Lines of Code (LOC)                              257\n  Comment Lines of Code (CLOC)                      95 (36.96%)\n  Non-Comment Lines of Code (NCLOC)                162 (63.04%)\n  Logical Lines of Code (LLOC)                      49 (19.07%)\n    Classes                                         30 (61.22%)\n      Average Class Length                           7\n        Minimum Class Length                         3\n        Maximum Class Length                        15\n      Average Method Length                          2\n        Minimum Method Length                        1\n        Maximum Method Length                        6\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     19 (38.78%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.14\n  Average Complexity per Class                    2.75\n    Minimum Class Complexity                      1.00\n    Maximum Class Complexity                      7.00\n  Average Complexity per Method                   1.70\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 4\n    Non-Static                                       4 (100.00%)\n    Static                                           0 (0.00%)\n  Method Calls                                      40\n    Non-Static                                      33 (82.50%)\n    Static                                           7 (17.50%)\n\nStructure\n  Namespaces                                         3\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            4\n    Abstract Classes                                 1 (25.00%)\n    Concrete Classes                                 3 (75.00%)\n  Methods                                           10\n    Scope\n      Non-Static Methods                             9 (90.00%)\n      Static Methods                                 1 (10.00%)\n    Visibility\n      Public Methods                                 9 (90.00%)\n      Non-Public Methods                             1 (10.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n```\n",
      "html": "<pre><code>phploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                4\n\nSize\n  Lines of Code (LOC)                              257\n  Comment Lines of Code (CLOC)                      95 (36.96%)\n  Non-Comment Lines of Code (NCLOC)                162 (63.04%)\n  Logical Lines of Code (LLOC)                      49 (19.07%)\n    Classes                                         30 (61.22%)\n      Average Class Length                           7\n        Minimum Class Length                         3\n        Maximum Class Length                        15\n      Average Method Length                          2\n        Minimum Method Length                        1\n        Maximum Method Length                        6\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     19 (38.78%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.14\n  Average Complexity per Class                    2.75\n    Minimum Class Complexity                      1.00\n    Maximum Class Complexity                      7.00\n  Average Complexity per Method                   1.70\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 4\n    Non-Static                                       4 (100.00%)\n    Static                                           0 (0.00%)\n  Method Calls                                      40\n    Non-Static                                      33 (82.50%)\n    Static                                           7 (17.50%)\n\nStructure\n  Namespaces                                         3\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            4\n    Abstract Classes                                 1 (25.00%)\n    Concrete Classes                                 3 (75.00%)\n  Methods                                           10\n    Scope\n      Non-Static Methods                             9 (90.00%)\n      Static Methods                                 1 (10.00%)\n    Visibility\n      Public Methods                                 9 (90.00%)\n      Non-Public Methods                             1 (10.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n</code></pre>\n",
      "id": 27
    },
    {
      "path": "14-About/03-Codebase/03-Member-permission-stats.md",
      "url": "14-About/03-Codebase/03-Member-permission-stats.html",
      "content": "```\nphploc 5.0.0 by Sebastian Bergmann.\n\nSize\n  Lines of Code (LOC)                              118\n  Comment Lines of Code (CLOC)                      35 (29.66%)\n  Non-Comment Lines of Code (NCLOC)                 83 (70.34%)\n  Logical Lines of Code (LLOC)                      33 (27.97%)\n    Classes                                         20 (60.61%)\n      Average Class Length                          10\n        Minimum Class Length                        10\n        Maximum Class Length                        10\n      Average Method Length                          6\n        Minimum Method Length                        1\n        Maximum Method Length                        9\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     13 (39.39%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.15\n  Average Complexity per Class                    3.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                      5.00\n  Average Complexity per Method                   2.67\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     5.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 8\n    Non-Static                                       5 (62.50%)\n    Static                                           3 (37.50%)\n  Method Calls                                      19\n    Non-Static                                      11 (57.89%)\n    Static                                           8 (42.11%)\n\nStructure\n  Namespaces                                         1\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            2\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 2 (100.00%)\n  Methods                                            3\n    Scope\n      Non-Static Methods                             3 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                 3 (100.00%)\n      Non-Public Methods                             0 (0.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n```\n",
      "html": "<pre><code>phploc 5.0.0 by Sebastian Bergmann.\n\nSize\n  Lines of Code (LOC)                              118\n  Comment Lines of Code (CLOC)                      35 (29.66%)\n  Non-Comment Lines of Code (NCLOC)                 83 (70.34%)\n  Logical Lines of Code (LLOC)                      33 (27.97%)\n    Classes                                         20 (60.61%)\n      Average Class Length                          10\n        Minimum Class Length                        10\n        Maximum Class Length                        10\n      Average Method Length                          6\n        Minimum Method Length                        1\n        Maximum Method Length                        9\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     13 (39.39%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.15\n  Average Complexity per Class                    3.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                      5.00\n  Average Complexity per Method                   2.67\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     5.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 8\n    Non-Static                                       5 (62.50%)\n    Static                                           3 (37.50%)\n  Method Calls                                      19\n    Non-Static                                      11 (57.89%)\n    Static                                           8 (42.11%)\n\nStructure\n  Namespaces                                         1\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            2\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 2 (100.00%)\n  Methods                                            3\n    Scope\n      Non-Static Methods                             3 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                 3 (100.00%)\n      Non-Public Methods                             0 (0.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n</code></pre>\n",
      "id": 28
    },
    {
      "path": "14-About/03-Codebase/04-Fluent-stats.md",
      "url": "14-About/03-Codebase/04-Fluent-stats.html",
      "content": "```\nphploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                4\n\nSize\n  Lines of Code (LOC)                              274\n  Comment Lines of Code (CLOC)                      98 (35.77%)\n  Non-Comment Lines of Code (NCLOC)                176 (64.23%)\n  Logical Lines of Code (LLOC)                      70 (25.55%)\n    Classes                                         43 (61.43%)\n      Average Class Length                          10\n        Minimum Class Length                         3\n        Maximum Class Length                        26\n      Average Method Length                          3\n        Minimum Method Length                        1\n        Maximum Method Length                       13\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     27 (38.57%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.26\n  Average Complexity per Class                    5.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                     11.00\n  Average Complexity per Method                   2.50\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 5\n    Non-Static                                       5 (100.00%)\n    Static                                           0 (0.00%)\n  Method Calls                                      37\n    Non-Static                                      24 (64.86%)\n    Static                                          13 (35.14%)\n\nStructure\n  Namespaces                                         2\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            4\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 4 (100.00%)\n  Methods                                           12\n    Scope\n      Non-Static Methods                            12 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                11 (91.67%)\n      Non-Public Methods                             1 (8.33%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n```\n",
      "html": "<pre><code>phploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                4\n\nSize\n  Lines of Code (LOC)                              274\n  Comment Lines of Code (CLOC)                      98 (35.77%)\n  Non-Comment Lines of Code (NCLOC)                176 (64.23%)\n  Logical Lines of Code (LLOC)                      70 (25.55%)\n    Classes                                         43 (61.43%)\n      Average Class Length                          10\n        Minimum Class Length                         3\n        Maximum Class Length                        26\n      Average Method Length                          3\n        Minimum Method Length                        1\n        Maximum Method Length                       13\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                     27 (38.57%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.26\n  Average Complexity per Class                    5.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                     11.00\n  Average Complexity per Method                   2.50\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     6.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 5\n    Non-Static                                       5 (100.00%)\n    Static                                           0 (0.00%)\n  Method Calls                                      37\n    Non-Static                                      24 (64.86%)\n    Static                                          13 (35.14%)\n\nStructure\n  Namespaces                                         2\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            4\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 4 (100.00%)\n  Methods                                           12\n    Scope\n      Non-Static Methods                            12 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                11 (91.67%)\n      Non-Public Methods                             1 (8.33%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n</code></pre>\n",
      "id": 29
    },
    {
      "path": "14-About/03-Codebase/05-Subsites-stats.md",
      "url": "14-About/03-Codebase/05-Subsites-stats.html",
      "content": "```\nphploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                2\n\nSize\n  Lines of Code (LOC)                              112\n  Comment Lines of Code (CLOC)                      53 (47.32%)\n  Non-Comment Lines of Code (NCLOC)                 59 (52.68%)\n  Logical Lines of Code (LLOC)                      16 (14.29%)\n    Classes                                          8 (50.00%)\n      Average Class Length                           4\n        Minimum Class Length                         2\n        Maximum Class Length                         6\n      Average Method Length                          1\n        Minimum Method Length                        1\n        Maximum Method Length                        2\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                      8 (50.00%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.19\n  Average Complexity per Class                    2.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                      3.00\n  Average Complexity per Method                   1.50\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     2.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 4\n    Non-Static                                       2 (50.00%)\n    Static                                           2 (50.00%)\n  Method Calls                                       7\n    Non-Static                                       3 (42.86%)\n    Static                                           4 (57.14%)\n\nStructure\n  Namespaces                                         2\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            2\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 2 (100.00%)\n  Methods                                            6\n    Scope\n      Non-Static Methods                             6 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                 6 (100.00%)\n      Non-Public Methods                             0 (0.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n```\n",
      "html": "<pre><code>phploc 5.0.0 by Sebastian Bergmann.\n\nDirectories                                          1\nFiles                                                2\n\nSize\n  Lines of Code (LOC)                              112\n  Comment Lines of Code (CLOC)                      53 (47.32%)\n  Non-Comment Lines of Code (NCLOC)                 59 (52.68%)\n  Logical Lines of Code (LLOC)                      16 (14.29%)\n    Classes                                          8 (50.00%)\n      Average Class Length                           4\n        Minimum Class Length                         2\n        Maximum Class Length                         6\n      Average Method Length                          1\n        Minimum Method Length                        1\n        Maximum Method Length                        2\n    Functions                                        0 (0.00%)\n      Average Function Length                        0\n    Not in classes or functions                      8 (50.00%)\n\nCyclomatic Complexity\n  Average Complexity per LLOC                     0.19\n  Average Complexity per Class                    2.50\n    Minimum Class Complexity                      2.00\n    Maximum Class Complexity                      3.00\n  Average Complexity per Method                   1.50\n    Minimum Method Complexity                     1.00\n    Maximum Method Complexity                     2.00\n\nDependencies\n  Global Accesses                                    0\n    Global Constants                                 0 (0.00%)\n    Global Variables                                 0 (0.00%)\n    Super-Global Variables                           0 (0.00%)\n  Attribute Accesses                                 4\n    Non-Static                                       2 (50.00%)\n    Static                                           2 (50.00%)\n  Method Calls                                       7\n    Non-Static                                       3 (42.86%)\n    Static                                           4 (57.14%)\n\nStructure\n  Namespaces                                         2\n  Interfaces                                         0\n  Traits                                             0\n  Classes                                            2\n    Abstract Classes                                 0 (0.00%)\n    Concrete Classes                                 2 (100.00%)\n  Methods                                            6\n    Scope\n      Non-Static Methods                             6 (100.00%)\n      Static Methods                                 0 (0.00%)\n    Visibility\n      Public Methods                                 6 (100.00%)\n      Non-Public Methods                             0 (0.00%)\n  Functions                                          0\n    Named Functions                                  0 (0.00%)\n    Anonymous Functions                              0 (0.00%)\n  Constants                                          0\n    Global Constants                                 0 (0.00%)\n    Class Constants                                  0 (0.00%)\n</code></pre>\n",
      "id": 30
    },
    {
      "path": "14-About/04-Plans.md",
      "url": "14-About/04-Plans.html",
      "content": "# Future additions\n\nHave a look at the [open issues](https://github.com/Firesphere/silverstripe-solr-search/issues) or [open pull requests](https://github.com/Firesphere/silverstripe-solr-search/pulls) for future plans.\n\nIf you feel something is missing, please make a [feature request](https://github.com/Firesphere/silverstripe-solr-search/issues/new?assignees=&labels=&template=feature_request.md&title=).",
      "html": "<h1 id=\"future-additions\">Future additions <a class=\"heading-anchor-permalink\" href=\"#future-additions\">#</a></h1>\n<p>Have a look at the <a href=\"https://github.com/Firesphere/silverstripe-solr-search/issues\">open issues</a> or <a href=\"https://github.com/Firesphere/silverstripe-solr-search/pulls\">open pull requests</a> for future plans.</p>\n<p>If you feel something is missing, please make a <a href=\"https://github.com/Firesphere/silverstripe-solr-search/issues/new?assignees=&amp;labels=&amp;template=feature_request.md&amp;title=\">feature request</a>.</p>\n",
      "id": 31
    }
  ]
}