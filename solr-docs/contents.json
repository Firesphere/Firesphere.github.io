{
  "paths": [
    {
      "type": "file",
      "value": "index.md"
    },
    {
      "type": "file",
      "value": "01-Changelog.md"
    },
    {
      "type": "file",
      "value": "02-Installation.md"
    },
    {
      "type": "file",
      "value": "03-Solr.md"
    },
    {
      "type": "file",
      "value": "04-Usage.md"
    },
    {
      "type": "file",
      "value": "05-Customisation.md"
    },
    {
      "type": "file",
      "value": "06-CMS-Usage.md"
    },
    {
      "type": "file",
      "value": "07-Fulltext-Search-Compatibility.md"
    },
    {
      "type": "file",
      "value": "08-Debugging.md"
    },
    {
      "type": "file",
      "value": "09-Suggestions.md"
    },
    {
      "type": "file",
      "value": "10-About.md"
    },
    {
      "type": "file",
      "value": "15-FAQ.md"
    },
    {
      "type": "file",
      "value": "16-Known-issues.md"
    }
  ],
  "contents": [
    {
      "path": "index.md",
      "url": "index.html",
      "content": "# Solr Search\n01. [Changelog](01-Changelog.md)\n02. [Installation](02-Installation.md)\n03. [Solr](03-Solr.md)\n04. [Usage](04-Usage.md)\n05. [Customisation](05-Customisation.md)\n06. [CMS Usage](06-CMS-Usage.md)\n07. [Fulltext Search compatibility](07-Fulltext-Search-Compatibility.md)\n08. [Debugging](08-Debugging.md)\n09. [Suggestions](09-Suggestions.md)\n10. [About](10-About.md)\n15. [FAQ](15-FAQ.md)\n16. [Known issues](16-Known-issues.md)\n",
      "html": "<h1 id=\"solr-search\">Solr Search <a class=\"heading-anchor-permalink\" href=\"#solr-search\">#</a></h1>\n<ol>\n<li><a href=\"01-Changelog.html\">Changelog</a></li>\n<li><a href=\"02-Installation.html\">Installation</a></li>\n<li><a href=\"03-Solr.html\">Solr</a></li>\n<li><a href=\"04-Usage.html\">Usage</a></li>\n<li><a href=\"05-Customisation.html\">Customisation</a></li>\n<li><a href=\"06-CMS-Usage.html\">CMS Usage</a></li>\n<li><a href=\"07-Fulltext-Search-Compatibility.html\">Fulltext Search compatibility</a></li>\n<li><a href=\"08-Debugging.html\">Debugging</a></li>\n<li><a href=\"09-Suggestions.html\">Suggestions</a></li>\n<li><a href=\"10-About.html\">About</a></li>\n<li><a href=\"15-FAQ.html\">FAQ</a></li>\n<li><a href=\"16-Known-issues.html\">Known issues</a></li>\n</ol>\n",
      "id": 0
    },
    {
      "path": "01-Changelog.md",
      "url": "01-Changelog.html",
      "content": "# Changelog\n\n## 1.0 beta\n\n- Fixes to the CMS Index Job\n- Fix issue #140 User not reset correctly\n- Fix issue #143 Not showing in search wasn't cleaned out correctly\n- Improved documentation\n\n## 0.9.x\n\n- Documentation updates\n- Bump the version to leave bugs behind\n\n## 0.8.x\n\n- Use multi-threaded indexing\n- Fix error with buffer adding\n- Initial Synonym support\n\n## 0.7.5 Notable updates\n\n- Added `Add[X]Fields()`\n- Fix spellcheck retry\n- Increased test coverage\n- Support for basic Fluent (select your language for each indexing run)\n- Documentation\n- Extracted compatibility to separate module\n\n## 0.5 First release\n\n- Use Solarium\n- Support Facets\n- Support terms\n- Support boosting\n- Support filtering/excluding\n- Support highlighting\n- Support elevation\n- Simplified API\n- Fulltext Search compatibility\n",
      "html": "<h1 id=\"changelog\">Changelog <a class=\"heading-anchor-permalink\" href=\"#changelog\">#</a></h1>\n<h2 id=\"1.0-beta\">1.0 beta <a class=\"heading-anchor-permalink\" href=\"#1.0-beta\">#</a></h2>\n<ul>\n<li>Fixes to the CMS Index Job</li>\n<li>Fix issue #140 User not reset correctly</li>\n<li>Fix issue #143 Not showing in search wasn’t cleaned out correctly</li>\n<li>Improved documentation</li>\n</ul>\n<h2 id=\"0.9.x\">0.9.x <a class=\"heading-anchor-permalink\" href=\"#0.9.x\">#</a></h2>\n<ul>\n<li>Documentation updates</li>\n<li>Bump the version to leave bugs behind</li>\n</ul>\n<h2 id=\"0.8.x\">0.8.x <a class=\"heading-anchor-permalink\" href=\"#0.8.x\">#</a></h2>\n<ul>\n<li>Use multi-threaded indexing</li>\n<li>Fix error with buffer adding</li>\n<li>Initial Synonym support</li>\n</ul>\n<h2 id=\"0.7.5-notable-updates\">0.7.5 Notable updates <a class=\"heading-anchor-permalink\" href=\"#0.7.5-notable-updates\">#</a></h2>\n<ul>\n<li>Added <code>Add[X]Fields()</code></li>\n<li>Fix spellcheck retry</li>\n<li>Increased test coverage</li>\n<li>Support for basic Fluent (select your language for each indexing run)</li>\n<li>Documentation</li>\n<li>Extracted compatibility to separate module</li>\n</ul>\n<h2 id=\"0.5-first-release\">0.5 First release <a class=\"heading-anchor-permalink\" href=\"#0.5-first-release\">#</a></h2>\n<ul>\n<li>Use Solarium</li>\n<li>Support Facets</li>\n<li>Support terms</li>\n<li>Support boosting</li>\n<li>Support filtering/excluding</li>\n<li>Support highlighting</li>\n<li>Support elevation</li>\n<li>Simplified API</li>\n<li>Fulltext Search compatibility</li>\n</ul>\n",
      "id": 1
    },
    {
      "path": "02-Installation.md",
      "url": "02-Installation.html",
      "content": "# Installing the module\n\nBest practice is to use composer:\n`composer require firesphere/solr-search`\n\n## Manual setup\n\n- Create a clean installation of SilverStripe 4 (`composer create-project`)\n- Clone this repo in to the folder of your likings\n- Check which modules you need to add to your base composer.json\n- Run a composer update\n- Create a base index:\n```php\nclass MyIndex extends BaseIndex\n{\n    /**\n     * Called during construction, this is the method that builds the structure.\n     * Used instead of overriding __construct as we have specific execution order - code that has\n     * to be run before _and/or_ after this.\n     * @throws Exception\n     */\n    public function init()\n    {\n        $this->addClass(SiteTree::class);\n\n        $this->addFulltextField('Title');\n    }\n    \n    public function getIndexName()\n    {\n        return 'this-is-my-index';\n    }\n```\n- Run `vendor/bin/sake dev/tasks/SolrConfigureTask` to configure the core\n- Run `vendor/bin/sake dev/tasks/SolrIndexTask` to add documents to your index\n\nHappy searching after that... once this is done\n",
      "html": "<h1 id=\"installing-the-module\">Installing the module <a class=\"heading-anchor-permalink\" href=\"#installing-the-module\">#</a></h1>\n<p>Best practice is to use composer:\n<code>composer require firesphere/solr-search</code></p>\n<h2 id=\"manual-setup\">Manual setup <a class=\"heading-anchor-permalink\" href=\"#manual-setup\">#</a></h2>\n<ul>\n<li>Create a clean installation of SilverStripe 4 (<code>composer create-project</code>)</li>\n<li>Clone this repo in to the folder of your likings</li>\n<li>Check which modules you need to add to your base composer.json</li>\n<li>Run a composer update</li>\n<li>Create a base index:</li>\n</ul>\n<pre><code class=\"language-php\">class MyIndex extends BaseIndex\n{\n    /**\n     * Called during construction, this is the method that builds the structure.\n     * Used instead of overriding __construct as we have specific execution order - code that has\n     * to be run before _and/or_ after this.\n     * @throws Exception\n     */\n    public function init()\n    {\n        $this-&gt;addClass(SiteTree::class);\n\n        $this-&gt;addFulltextField('Title');\n    }\n    \n    public function getIndexName()\n    {\n        return 'this-is-my-index';\n    }\n</code></pre>\n<ul>\n<li>Run <code>vendor/bin/sake dev/tasks/SolrConfigureTask</code> to configure the core</li>\n<li>Run <code>vendor/bin/sake dev/tasks/SolrIndexTask</code> to add documents to your index</li>\n</ul>\n<p>Happy searching after that… once this is done</p>\n",
      "id": 2
    },
    {
      "path": "03-Solr.md",
      "url": "03-Solr.html",
      "content": "# Installing Solr\n\nAdvised is to use the latest Solr version. At the time of writing, this is version 8.3.0.\n\nIn this guide, it's assumed you are running on a Linux based host.\n\n## Requirements\n\n### Java\n\n#### Debian based distributions\n\n`sudo apt install default-jre`\n\n## Installation\n\nTaken from https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html\n\nUpdate to match the required version. You can find the latest version here: https://www-us.apache.org/dist/lucene/solr/\n```bash\nwget http://www.apache.org/dyn/closer.lua/lucene/solr/8.1.0/solr-8.1.0.tgz # find your local URL manually\ntar xvf solr-8.1.0.tgz solr-8.1.0/bin/install_solr_service.sh --strip-components=2\nsudo bash ./install_solr_service.sh solr-8.1.0.tgz\n```\n\nThis will install Solr 8.x as a service on your (virtual) machine\n\n## Debian Jessie\n\nDebian Jessie needs backports to get Java 8 working:\n```bash\necho \"deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main\" > /etc/apt/sources.list.d/jessie-backports.list\napt-get update\napt-get install -t jessie-backports openjdk-8-jre\n```\n\nIf you run in to trouble updating, add the following to `/etc/apt/apt.conf`:\n`Acquire::Check-Valid-Until \"false\";`\n\n## Vagrant machines\n\nSee [Known issues](16-Known-issues.md) for known issues with Vagrant",
      "html": "<h1 id=\"installing-solr\">Installing Solr <a class=\"heading-anchor-permalink\" href=\"#installing-solr\">#</a></h1>\n<p>Advised is to use the latest Solr version. At the time of writing, this is version 8.3.0.</p>\n<p>In this guide, it’s assumed you are running on a Linux based host.</p>\n<h2 id=\"requirements\">Requirements <a class=\"heading-anchor-permalink\" href=\"#requirements\">#</a></h2>\n<h3 id=\"java\">Java <a class=\"heading-anchor-permalink\" href=\"#java\">#</a></h3>\n<h4 id=\"debian-based-distributions\">Debian based distributions <a class=\"heading-anchor-permalink\" href=\"#debian-based-distributions\">#</a></h4>\n<p><code>sudo apt install default-jre</code></p>\n<h2 id=\"installation\">Installation <a class=\"heading-anchor-permalink\" href=\"#installation\">#</a></h2>\n<p>Taken from <a href=\"https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html\">https://lucene.apache.org/solr/guide/7_7/taking-solr-to-production.html</a></p>\n<p>Update to match the required version. You can find the latest version here: <a href=\"https://www-us.apache.org/dist/lucene/solr/\">https://www-us.apache.org/dist/lucene/solr/</a></p>\n<pre><code class=\"language-bash\">wget http://www.apache.org/dyn/closer.lua/lucene/solr/8.1.0/solr-8.1.0.tgz # find your local URL manually\ntar xvf solr-8.1.0.tgz solr-8.1.0/bin/install_solr_service.sh --strip-components=2\nsudo bash ./install_solr_service.sh solr-8.1.0.tgz\n</code></pre>\n<p>This will install Solr 8.x as a service on your (virtual) machine</p>\n<h2 id=\"debian-jessie\">Debian Jessie <a class=\"heading-anchor-permalink\" href=\"#debian-jessie\">#</a></h2>\n<p>Debian Jessie needs backports to get Java 8 working:</p>\n<pre><code class=\"language-bash\">echo &quot;deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main&quot; &gt; /etc/apt/sources.list.d/jessie-backports.list\napt-get update\napt-get install -t jessie-backports openjdk-8-jre\n</code></pre>\n<p>If you run in to trouble updating, add the following to <code>/etc/apt/apt.conf</code>:\n<code>Acquire::Check-Valid-Until &quot;false&quot;;</code></p>\n<h2 id=\"vagrant-machines\">Vagrant machines <a class=\"heading-anchor-permalink\" href=\"#vagrant-machines\">#</a></h2>\n<p>See <a href=\"16-Known-issues.html\">Known issues</a> for known issues with Vagrant</p>\n",
      "id": 3
    },
    {
      "path": "04-Usage.md",
      "url": "04-Usage.html",
      "content": "# Usage\n\n## Getting started\n\nFirst, create an index extending the `BaseIndex` class. This will require a `getIndexName` method\nwhich is used to determine the name of the index to query Solr.\n\n## Configuration\n\nConfiguring Solr is done via YML:\n```yml\nFiresphere\\SolrSearch\\Services\\SolrCoreService:\n  config:\n    endpoint:\n      myhostname:\n        host: myhost.com\n        port: 8983\n        timeout: 10\n        # set up timeouts\n        index_timeout: 10\n        optimize_timeout: 100\n        finalize_timeout: 300\n        http_method: 'AUTO'\n        # commit within 60ms\n        commit_within: 60\n  # default path settings\n  store:\n    mode: 'file'\n    path: '.solr'\n  cores: 2\n\n```\n\nThe config is used to connect to Solr. This will tell the module where the Solr instance for this index lives and how to connect.\n\nThe store is to select the way to configure the solr configuration storage. Options are `file` and a required path, or `post` and a required endpoint to post to.\n\nPost config:\n```yml\nstore:\n  mode: 'post'\n  path: '/my_post_endpoint'\n  uri: 'https://mydomain.com'\n```\n\n#### Defining cores\n\nIf your server has multiple cores available, you can define the amount of cores in the config.\nDuring indexing, this means that each core gets to do an indexing of a group.\nThe advantage is that it takes all cores available, speeding up the indexing process by the amount of cores available.\n\nBecause the amount of cores can not be determined programmatically, due to access control, you will have to define the amount of cores available manually.\n\n\n**NOTE**\n\nGiven the current situation in server-land, the default amount of cores is 2. This should work fine for\nmost situations, even if you only have one core available. If you have more cores, you can make this\nnumber larger, of course.\n\n**NOTE**\n\nUsing all cores your system has, will make your website pretty slow during indexing! It is adviced to keep\nat least one core free for handling page visits, while you're running an index.\n\n### Using init()\n\nSimilar to the FulltextSearch module, using init supports all basic methods to add fulltext or filter fields.\n\nAvailable methods are:\n\n| Method | Purpose | Required | Usage |\n|-|-|-|-|\n| addClass | Add classes to index | Yes | `$this->addClass(SiteTree::class);` |\n| addFulltextField | Add fields to index | No* | `$this->addFulltextField('Content');` |\n| addFilterField | Add fields to use for filtering | No | `$this->addFilterField('ID');` |\n| addBoostedField | Fields to boost by on Query time | No | `$this->addBoostedField('Title', ([]/2), 2);`** |\n| addSortField | Field to sort by | No | `$this->addSortField('Created');` |\n| addCopyField | Add a special copy field, besides the default _text | No | `$this->addCopyField('myCopy', ['Fields', 'To', 'Copy']);` |\n| addStoredField | Add a field to be stored specifically | No | `$this->addStoredField('LastEdited');` |\n| addFacetField | Field to build faceting on | No | `$this->addFacetField(SiteTree::class, ['Title' => 'FacetObject', 'Field' => 'FacetObjectID']);` |\n \n\n### Using YML\n\n```yml\nFiresphere\\SolrSearch\\Indexes\\BaseIndex:\n  MySearchIndex:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Content\n      - TestObject.Title\n      - TestObject.TestRelation.Title\n    SortFields: \n\t  - Created\n    FilterFields:\n      - Title\n      - Created\n      - Firesphere\\SolrSearch\\Tests\\TestObject\n    BoostedFields:\n\t  - Title\n    CopyFields:\n      _text:\n        - '*'\n    DefaultField: _text\n    FacetFields:\n      Firesphere\\SolrSearch\\Tests\\TestObject:\n        Field: ID\n        Title: TestObject\n\n```\n\n#### Moving from init to YML\n\nThe compatibility module has an extension method that allows you to build your index and then generate the YML content for you. See the compatibility module for more details.\n\n## Accessing Solr\n\nIf available, you can access your Solr instance at `http://mydomain.com:8983`\n\n\n----------\n\\* Although not required, it's highly recomended\n\n\\*\\* The second option of an array can be omitted and directly given the boost value\n",
      "html": "<h1 id=\"usage\">Usage <a class=\"heading-anchor-permalink\" href=\"#usage\">#</a></h1>\n<h2 id=\"getting-started\">Getting started <a class=\"heading-anchor-permalink\" href=\"#getting-started\">#</a></h2>\n<p>First, create an index extending the <code>BaseIndex</code> class. This will require a <code>getIndexName</code> method\nwhich is used to determine the name of the index to query Solr.</p>\n<h2 id=\"configuration\">Configuration <a class=\"heading-anchor-permalink\" href=\"#configuration\">#</a></h2>\n<p>Configuring Solr is done via YML:</p>\n<pre><code class=\"language-yml\">Firesphere\\SolrSearch\\Services\\SolrCoreService:\n  config:\n    endpoint:\n      myhostname:\n        host: myhost.com\n        port: 8983\n        timeout: 10\n        # set up timeouts\n        index_timeout: 10\n        optimize_timeout: 100\n        finalize_timeout: 300\n        http_method: 'AUTO'\n        # commit within 60ms\n        commit_within: 60\n  # default path settings\n  store:\n    mode: 'file'\n    path: '.solr'\n  cores: 2\n\n</code></pre>\n<p>The config is used to connect to Solr. This will tell the module where the Solr instance for this index lives and how to connect.</p>\n<p>The store is to select the way to configure the solr configuration storage. Options are <code>file</code> and a required path, or <code>post</code> and a required endpoint to post to.</p>\n<p>Post config:</p>\n<pre><code class=\"language-yml\">store:\n  mode: 'post'\n  path: '/my_post_endpoint'\n  uri: 'https://mydomain.com'\n</code></pre>\n<h4 id=\"defining-cores\">Defining cores <a class=\"heading-anchor-permalink\" href=\"#defining-cores\">#</a></h4>\n<p>If your server has multiple cores available, you can define the amount of cores in the config.\nDuring indexing, this means that each core gets to do an indexing of a group.\nThe advantage is that it takes all cores available, speeding up the indexing process by the amount of cores available.</p>\n<p>Because the amount of cores can not be determined programmatically, due to access control, you will have to define the amount of cores available manually.</p>\n<p><strong>NOTE</strong></p>\n<p>Given the current situation in server-land, the default amount of cores is 2. This should work fine for\nmost situations, even if you only have one core available. If you have more cores, you can make this\nnumber larger, of course.</p>\n<p><strong>NOTE</strong></p>\n<p>Using all cores your system has, will make your website pretty slow during indexing! It is adviced to keep\nat least one core free for handling page visits, while you’re running an index.</p>\n<h3 id=\"using-init()\">Using init() <a class=\"heading-anchor-permalink\" href=\"#using-init()\">#</a></h3>\n<p>Similar to the FulltextSearch module, using init supports all basic methods to add fulltext or filter fields.</p>\n<p>Available methods are:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Purpose</th>\n<th>Required</th>\n<th>Usage</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addClass</td>\n<td>Add classes to index</td>\n<td>Yes</td>\n<td><code>$this-&gt;addClass(SiteTree::class);</code></td>\n</tr>\n<tr>\n<td>addFulltextField</td>\n<td>Add fields to index</td>\n<td>No*</td>\n<td><code>$this-&gt;addFulltextField('Content');</code></td>\n</tr>\n<tr>\n<td>addFilterField</td>\n<td>Add fields to use for filtering</td>\n<td>No</td>\n<td><code>$this-&gt;addFilterField('ID');</code></td>\n</tr>\n<tr>\n<td>addBoostedField</td>\n<td>Fields to boost by on Query time</td>\n<td>No</td>\n<td><code>$this-&gt;addBoostedField('Title', ([]/2), 2);</code>**</td>\n</tr>\n<tr>\n<td>addSortField</td>\n<td>Field to sort by</td>\n<td>No</td>\n<td><code>$this-&gt;addSortField('Created');</code></td>\n</tr>\n<tr>\n<td>addCopyField</td>\n<td>Add a special copy field, besides the default _text</td>\n<td>No</td>\n<td><code>$this-&gt;addCopyField('myCopy', ['Fields', 'To', 'Copy']);</code></td>\n</tr>\n<tr>\n<td>addStoredField</td>\n<td>Add a field to be stored specifically</td>\n<td>No</td>\n<td><code>$this-&gt;addStoredField('LastEdited');</code></td>\n</tr>\n<tr>\n<td>addFacetField</td>\n<td>Field to build faceting on</td>\n<td>No</td>\n<td><code>$this-&gt;addFacetField(SiteTree::class, ['Title' =&gt; 'FacetObject', 'Field' =&gt; 'FacetObjectID']);</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"using-yml\">Using YML <a class=\"heading-anchor-permalink\" href=\"#using-yml\">#</a></h3>\n<pre><code class=\"language-yml\">Firesphere\\SolrSearch\\Indexes\\BaseIndex:\n  MySearchIndex:\n    Classes:\n      - SilverStripe\\CMS\\Model\\SiteTree\n    FulltextFields:\n      - Content\n      - TestObject.Title\n      - TestObject.TestRelation.Title\n    SortFields: \n\t  - Created\n    FilterFields:\n      - Title\n      - Created\n      - Firesphere\\SolrSearch\\Tests\\TestObject\n    BoostedFields:\n\t  - Title\n    CopyFields:\n      _text:\n        - '*'\n    DefaultField: _text\n    FacetFields:\n      Firesphere\\SolrSearch\\Tests\\TestObject:\n        Field: ID\n        Title: TestObject\n\n</code></pre>\n<h4 id=\"moving-from-init-to-yml\">Moving from init to YML <a class=\"heading-anchor-permalink\" href=\"#moving-from-init-to-yml\">#</a></h4>\n<p>The compatibility module has an extension method that allows you to build your index and then generate the YML content for you. See the compatibility module for more details.</p>\n<h2 id=\"accessing-solr\">Accessing Solr <a class=\"heading-anchor-permalink\" href=\"#accessing-solr\">#</a></h2>\n<p>If available, you can access your Solr instance at <code>http://mydomain.com:8983</code></p>\n<hr>\n<p>* Although not required, it’s highly recomended</p>\n<p>** The second option of an array can be omitted and directly given the boost value</p>\n",
      "id": 4
    },
    {
      "path": "05-Customisation.md",
      "url": "05-Customisation.html",
      "content": "# Customisation\n\nAll steps of the process, from index to searching, have extension points.\n\nThese extension points can be used to alter or update the respective steps\n\nAvailable extension points:\n\n| Method | Used for | Available on |\n|-|-|-|\n| onBeforeSolrConfigureTask | Alter the Configuration before uploading the configuration | SolrConfigureTask |\n| onConfigureIndex | Operates after an index is added | SolrConfigureTask |\n| onAfterSolrConfigureTask | Executes after Solr is configured. Can be used to check if the configuration is added for example | SolrConfigureTask |\n| onBeforeConfig | Operates before a configuration is uploaded | SolrConfigureTask |\n| onBeforeInit | Update initialisation features | BaseIndex |\n| onAfterInit | Update initialisation features | BaseIndex |\n| onBeforeSearch | Before executing the search, update the query | BaseIndex |\n| onAfterSearch | Manipulate the results | BaseIndex |\n| updateSearchResults | Manipulate the returned result object | BaseIndex |\n",
      "html": "<h1 id=\"customisation\">Customisation <a class=\"heading-anchor-permalink\" href=\"#customisation\">#</a></h1>\n<p>All steps of the process, from index to searching, have extension points.</p>\n<p>These extension points can be used to alter or update the respective steps</p>\n<p>Available extension points:</p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Used for</th>\n<th>Available on</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforeSolrConfigureTask</td>\n<td>Alter the Configuration before uploading the configuration</td>\n<td>SolrConfigureTask</td>\n</tr>\n<tr>\n<td>onConfigureIndex</td>\n<td>Operates after an index is added</td>\n<td>SolrConfigureTask</td>\n</tr>\n<tr>\n<td>onAfterSolrConfigureTask</td>\n<td>Executes after Solr is configured. Can be used to check if the configuration is added for example</td>\n<td>SolrConfigureTask</td>\n</tr>\n<tr>\n<td>onBeforeConfig</td>\n<td>Operates before a configuration is uploaded</td>\n<td>SolrConfigureTask</td>\n</tr>\n<tr>\n<td>onBeforeInit</td>\n<td>Update initialisation features</td>\n<td>BaseIndex</td>\n</tr>\n<tr>\n<td>onAfterInit</td>\n<td>Update initialisation features</td>\n<td>BaseIndex</td>\n</tr>\n<tr>\n<td>onBeforeSearch</td>\n<td>Before executing the search, update the query</td>\n<td>BaseIndex</td>\n</tr>\n<tr>\n<td>onAfterSearch</td>\n<td>Manipulate the results</td>\n<td>BaseIndex</td>\n</tr>\n<tr>\n<td>updateSearchResults</td>\n<td>Manipulate the returned result object</td>\n<td>BaseIndex</td>\n</tr>\n</tbody>\n</table>\n",
      "id": 5
    },
    {
      "path": "06-CMS-Usage.md",
      "url": "06-CMS-Usage.html",
      "content": "# CMS Usage\n\nSee the Search admin in the CMS\n\n## Features\n- See if there are any applicable dirty objects to re-index\n- See the latest Solr logs\n- Add, remove or edit Synonyms\n",
      "html": "<h1 id=\"cms-usage\">CMS Usage <a class=\"heading-anchor-permalink\" href=\"#cms-usage\">#</a></h1>\n<p>See the Search admin in the CMS</p>\n<h2 id=\"features\">Features <a class=\"heading-anchor-permalink\" href=\"#features\">#</a></h2>\n<ul>\n<li>See if there are any applicable dirty objects to re-index</li>\n<li>See the latest Solr logs</li>\n<li>Add, remove or edit Synonyms</li>\n</ul>\n",
      "id": 6
    },
    {
      "path": "07-Fulltext-Search-Compatibility.md",
      "url": "07-Fulltext-Search-Compatibility.html",
      "content": "# Fulltext Search Compatibility\\*\n\nTo minimise the impact of migrating, there is a compatibility module available.\n\nThis module will remove the need to completely update all your indexes.\n\nA few small changes to your Search Controller and Results template may be needed however.\n\nThe primary difference between FTS and this module is the way it's configured. Therefore some stubs are available in the compatibility module.\n\nYou can find this compatibility module here: https://github.com/Firesphere/silverstripe-solr-compatibility\n\n\n----------\n\n\\* From here on called \"FTS\"",
      "html": "<h1 id=\"fulltext-search-compatibility*\">Fulltext Search Compatibility* <a class=\"heading-anchor-permalink\" href=\"#fulltext-search-compatibility*\">#</a></h1>\n<p>To minimise the impact of migrating, there is a compatibility module available.</p>\n<p>This module will remove the need to completely update all your indexes.</p>\n<p>A few small changes to your Search Controller and Results template may be needed however.</p>\n<p>The primary difference between FTS and this module is the way it’s configured. Therefore some stubs are available in the compatibility module.</p>\n<p>You can find this compatibility module here: <a href=\"https://github.com/Firesphere/silverstripe-solr-compatibility\">https://github.com/Firesphere/silverstripe-solr-compatibility</a></p>\n<hr>\n<p>* From here on called “FTS”</p>\n",
      "id": 7
    },
    {
      "path": "08-Debugging.md",
      "url": "08-Debugging.html",
      "content": "# Debugging\n\nTo debug the executed query, the `BaseIndex` has a method available to show you all the components of the executed query as an array. To get this data, execute the following after you have done your search:\n`$index->getRawQuery()->getData()`\n`$index->getQueryTerms()`\n\nThese two methods supply more information about the executed query.\n\nFor a more thorough debugging, have a look at the Solarium docs for getting the debugging information:\nhttps://solarium.readthedocs.io/en/stable/queries/select-query/building-a-select-query/components/debug-component/\n\n# Logging\n\nEvery error triggers the SolrLogger, to retrieve the errors from Solr and store them in the database.\n\nThese error logs are deletable only in dev mode or by administrators.\n\nThe logs can be found at `admin/searchadmin/Firesphere-SolrSearch-Models-SolrLog` for checking what is wrong.\n\n## x:Unknown indexes\n\nBecause Solr 5 and lower don't return the actual core that threw the error, logging will say `x:Unknown`. This does not mean\nthe log is not there, it simply means the core that threw the error isn't known by the server.\n\n## Sorting\n\nBy default, SilverStripe sorts by ID, causing the oldest errors to show first. Advised is to sort by Timestamp before looking at the actual error.\n\n## Colour codes\n\nThe gridfield is colour coded for the type of error. This can be disabled by overriding the GridFieldExtension class and removing\nany classes that are unwished for.\n",
      "html": "<h1 id=\"debugging\">Debugging <a class=\"heading-anchor-permalink\" href=\"#debugging\">#</a></h1>\n<p>To debug the executed query, the <code>BaseIndex</code> has a method available to show you all the components of the executed query as an array. To get this data, execute the following after you have done your search:\n<code>$index-&gt;getRawQuery()-&gt;getData()</code>\n<code>$index-&gt;getQueryTerms()</code></p>\n<p>These two methods supply more information about the executed query.</p>\n<p>For a more thorough debugging, have a look at the Solarium docs for getting the debugging information:\n<a href=\"https://solarium.readthedocs.io/en/stable/queries/select-query/building-a-select-query/components/debug-component/\">https://solarium.readthedocs.io/en/stable/queries/select-query/building-a-select-query/components/debug-component/</a></p>\n<h1 id=\"logging\">Logging <a class=\"heading-anchor-permalink\" href=\"#logging\">#</a></h1>\n<p>Every error triggers the SolrLogger, to retrieve the errors from Solr and store them in the database.</p>\n<p>These error logs are deletable only in dev mode or by administrators.</p>\n<p>The logs can be found at <code>admin/searchadmin/Firesphere-SolrSearch-Models-SolrLog</code> for checking what is wrong.</p>\n<h2 id=\"x%3Aunknown-indexes\">x:Unknown indexes <a class=\"heading-anchor-permalink\" href=\"#x%3Aunknown-indexes\">#</a></h2>\n<p>Because Solr 5 and lower don’t return the actual core that threw the error, logging will say <code>x:Unknown</code>. This does not mean\nthe log is not there, it simply means the core that threw the error isn’t known by the server.</p>\n<h2 id=\"sorting\">Sorting <a class=\"heading-anchor-permalink\" href=\"#sorting\">#</a></h2>\n<p>By default, SilverStripe sorts by ID, causing the oldest errors to show first. Advised is to sort by Timestamp before looking at the actual error.</p>\n<h2 id=\"colour-codes\">Colour codes <a class=\"heading-anchor-permalink\" href=\"#colour-codes\">#</a></h2>\n<p>The gridfield is colour coded for the type of error. This can be disabled by overriding the GridFieldExtension class and removing\nany classes that are unwished for.</p>\n",
      "id": 8
    },
    {
      "path": "09-Suggestions.md",
      "url": "09-Suggestions.html",
      "content": "# Solr Suggest\n\nIf you are using Solr5 or above, you can use the Solr Suggest option. This is enabled by default.\n\nTo set this up, have a look at [autosuggest proxy](https://github.com/Firesphere/silverstripe-solr-search/blob/master/client/proxy/autosuggest.php)\n\nCopy this file to a convenient location, e.g. your `docroot/public` folder and edit the contents of your copy, to match your Solr core and location of the Solr instance.\n\nNote that the proxy can not read from the Silverstripe config, thus it needs to be edited manually.\n\nOnce that's in place, you can use javascript to get Solr's suggestions, by querying the autosuggest.php file directly.\n\nYou need to query the file directly, to prevent a full execution of the whole Silverstripe stack, which is too slow for proper auto suggesting.\nAlso, make sure the file is accessible.\n\nThe output of the file is a JSON object, looking something like this:\n```json\n{\n\n    \"responseHeader\": {\n        \"status\": 0,\n        \"QTime\": 0\n    },\n    \"suggest\": {\n        \"Suggester\": {\n            \"home\": {\n                \"numFound\": 10,\n                \"suggestions\": [\n                    {\n                        \"term\": \"home\",\n                        \"weight\": 376,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homeajaxaction\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebartonvillevpsbartonvilletccommysitecodememberextensionphp\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homeblauwboomdomainsmyserverpublichtmlcompframeworksrci\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrew\",\n                        \"weight\": 26,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewcurlother\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewhttpsbrewsh\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebrewing\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homebridgewillstaginpublichtmlsilvershopcodecartordertotalcalculatorphp\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    },\n                    {\n                        \"term\": \"homecategorycategory\",\n                        \"weight\": 1,\n                        \"payload\": \"\"\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\nWhich you can then use in your javascript to populate a dropdown.\n\n## Security note\n\nAs the query is passed straight in to Solr, there is no option of database SQL injection.",
      "html": "<h1 id=\"solr-suggest\">Solr Suggest <a class=\"heading-anchor-permalink\" href=\"#solr-suggest\">#</a></h1>\n<p>If you are using Solr5 or above, you can use the Solr Suggest option. This is enabled by default.</p>\n<p>To set this up, have a look at <a href=\"https://github.com/Firesphere/silverstripe-solr-search/blob/master/client/proxy/autosuggest.php\">autosuggest proxy</a></p>\n<p>Copy this file to a convenient location, e.g. your <code>docroot/public</code> folder and edit the contents of your copy, to match your Solr core and location of the Solr instance.</p>\n<p>Note that the proxy can not read from the Silverstripe config, thus it needs to be edited manually.</p>\n<p>Once that’s in place, you can use javascript to get Solr’s suggestions, by querying the autosuggest.php file directly.</p>\n<p>You need to query the file directly, to prevent a full execution of the whole Silverstripe stack, which is too slow for proper auto suggesting.\nAlso, make sure the file is accessible.</p>\n<p>The output of the file is a JSON object, looking something like this:</p>\n<pre><code class=\"language-json\">{\n\n    &quot;responseHeader&quot;: {\n        &quot;status&quot;: 0,\n        &quot;QTime&quot;: 0\n    },\n    &quot;suggest&quot;: {\n        &quot;Suggester&quot;: {\n            &quot;home&quot;: {\n                &quot;numFound&quot;: 10,\n                &quot;suggestions&quot;: [\n                    {\n                        &quot;term&quot;: &quot;home&quot;,\n                        &quot;weight&quot;: 376,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homeajaxaction&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebartonvillevpsbartonvilletccommysitecodememberextensionphp&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homeblauwboomdomainsmyserverpublichtmlcompframeworksrci&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrew&quot;,\n                        &quot;weight&quot;: 26,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewcurlother&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewhttpsbrewsh&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebrewing&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homebridgewillstaginpublichtmlsilvershopcodecartordertotalcalculatorphp&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    },\n                    {\n                        &quot;term&quot;: &quot;homecategorycategory&quot;,\n                        &quot;weight&quot;: 1,\n                        &quot;payload&quot;: &quot;&quot;\n                    }\n                ]\n            }\n        }\n    }\n}\n</code></pre>\n<p>Which you can then use in your javascript to populate a dropdown.</p>\n<h2 id=\"security-note\">Security note <a class=\"heading-anchor-permalink\" href=\"#security-note\">#</a></h2>\n<p>As the query is passed straight in to Solr, there is no option of database SQL injection.</p>\n",
      "id": 9
    },
    {
      "path": "10-About.md",
      "url": "10-About.html",
      "content": "# About\n\nThis solr search module is aimed at a more modern, modular approach to searching with Solr, to replace the existing FTS module that has some shortcomings and problems with features that Solr does offer, but aren't supported.\n\nIt is maintained by:\n* Simon `Firesphere` Erkelens\n* Marco `Sheepy` Hermo",
      "html": "<h1 id=\"about\">About <a class=\"heading-anchor-permalink\" href=\"#about\">#</a></h1>\n<p>This solr search module is aimed at a more modern, modular approach to searching with Solr, to replace the existing FTS module that has some shortcomings and problems with features that Solr does offer, but aren’t supported.</p>\n<p>It is maintained by:</p>\n<ul>\n<li>Simon <code>Firesphere</code> Erkelens</li>\n<li>Marco <code>Sheepy</code> Hermo</li>\n</ul>\n",
      "id": 10
    },
    {
      "path": "15-FAQ.md",
      "url": "15-FAQ.html",
      "content": "# FAQ\n\n### What do you mean not fast enough?\n\nAll indexing, as well as the search, require disk space. If the disk can not respond fast enough to a write,\neither PHP or Java will stop and throw an error\n\n### Do you support synonyms\n\nYes! Including US to UK spelling synonyms by default!\n\n### Fast?\n\nYes, very fast\n\n### Compatible with the Fulltext Search Module?\n\n99% and counting, does that work for you? Have a look at the compatibility module\n\n### Why do I need to name my index?\n\nYou have a name yourself, don't you? It makes sense to name the index too.\n\n### Only File storage?\n\nHold your horses, this is a beta stage project, more storage options to come!\n\n### My core.properties won't persist, what gives?\n\nMost likely, you're running a vagrant or docker machine? And even more likely\nrunning it on Linux.\n\nThe solution is to create a symlink in `/var/solr/data/{your-policy-name/` to `/var/www/{yoursite}/.solr/.conf`, so the\n`conf` folder points to your locally writable folder for Vagrant.\n\nIn your search.yml, add the following as the location of your FileStore config:\n```yaml\nFiresphere\\SolrSearch\\Services\\SolrCoreService:\n  store:\n    mode: 'file'\n    path: '/var/solr/data'\n```\n\nThat way, Solr will write it's own files to the correct core folder where it can write, but your config can still live\ninside your project.\n\n### I would like a feature to be added!\n\nI would like an issue to be created\n\n### Dealing with errors\n\nEspecially when using facets, you should not redeclare fields to be filterable as well. If you run in to an error \nsaying you have duplicate fields, check your configuration that e.g. FilterFields does not have an overlap with FacetFields, etc.\n",
      "html": "<h1 id=\"faq\">FAQ <a class=\"heading-anchor-permalink\" href=\"#faq\">#</a></h1>\n<h3 id=\"what-do-you-mean-not-fast-enough%3F\">What do you mean not fast enough? <a class=\"heading-anchor-permalink\" href=\"#what-do-you-mean-not-fast-enough%3F\">#</a></h3>\n<p>All indexing, as well as the search, require disk space. If the disk can not respond fast enough to a write,\neither PHP or Java will stop and throw an error</p>\n<h3 id=\"do-you-support-synonyms\">Do you support synonyms <a class=\"heading-anchor-permalink\" href=\"#do-you-support-synonyms\">#</a></h3>\n<p>Yes! Including US to UK spelling synonyms by default!</p>\n<h3 id=\"fast%3F\">Fast? <a class=\"heading-anchor-permalink\" href=\"#fast%3F\">#</a></h3>\n<p>Yes, very fast</p>\n<h3 id=\"compatible-with-the-fulltext-search-module%3F\">Compatible with the Fulltext Search Module? <a class=\"heading-anchor-permalink\" href=\"#compatible-with-the-fulltext-search-module%3F\">#</a></h3>\n<p>99% and counting, does that work for you? Have a look at the compatibility module</p>\n<h3 id=\"why-do-i-need-to-name-my-index%3F\">Why do I need to name my index? <a class=\"heading-anchor-permalink\" href=\"#why-do-i-need-to-name-my-index%3F\">#</a></h3>\n<p>You have a name yourself, don’t you? It makes sense to name the index too.</p>\n<h3 id=\"only-file-storage%3F\">Only File storage? <a class=\"heading-anchor-permalink\" href=\"#only-file-storage%3F\">#</a></h3>\n<p>Hold your horses, this is a beta stage project, more storage options to come!</p>\n<h3 id=\"my-core.properties-won%E2%80%99t-persist%2C-what-gives%3F\">My core.properties won’t persist, what gives? <a class=\"heading-anchor-permalink\" href=\"#my-core.properties-won%E2%80%99t-persist%2C-what-gives%3F\">#</a></h3>\n<p>Most likely, you’re running a vagrant or docker machine? And even more likely\nrunning it on Linux.</p>\n<p>The solution is to create a symlink in <code>/var/solr/data/{your-policy-name/</code> to <code>/var/www/{yoursite}/.solr/.conf</code>, so the\n<code>conf</code> folder points to your locally writable folder for Vagrant.</p>\n<p>In your search.yml, add the following as the location of your FileStore config:</p>\n<pre><code class=\"language-yaml\">Firesphere\\SolrSearch\\Services\\SolrCoreService:\n  store:\n    mode: 'file'\n    path: '/var/solr/data'\n</code></pre>\n<p>That way, Solr will write it’s own files to the correct core folder where it can write, but your config can still live\ninside your project.</p>\n<h3 id=\"i-would-like-a-feature-to-be-added!\">I would like a feature to be added! <a class=\"heading-anchor-permalink\" href=\"#i-would-like-a-feature-to-be-added!\">#</a></h3>\n<p>I would like an issue to be created</p>\n<h3 id=\"dealing-with-errors\">Dealing with errors <a class=\"heading-anchor-permalink\" href=\"#dealing-with-errors\">#</a></h3>\n<p>Especially when using facets, you should not redeclare fields to be filterable as well. If you run in to an error\nsaying you have duplicate fields, check your configuration that e.g. FilterFields does not have an overlap with FacetFields, etc.</p>\n",
      "id": 11
    },
    {
      "path": "16-Known-issues.md",
      "url": "16-Known-issues.html",
      "content": "# Known issues\n\n## Database errors\n\nDid you do a build?\n\n`https://yourdomain.com/dev/build?flush=all`\n\nIt is known that the final index might throw a MySQL error.\nThis is expected at the moment, and sadly, unavoidable so far.\nIf you have a solution, we would love to hear from you!\n\n\n## Linux hosts with Vagrant\n\nThere is a known issue between Linux hosts using Vagrant. Solr does not have\nthe correct write permissions, and Apache does not have the correct write permissions either.\n\nThis can be resolved by setting the folder of your Solr Core to `/var/solr/data`.\n\nThen, create the following subfolders in the data folder:\n- `YourCoreName/conf`\n- `YourCoreName/data`\n\nThen, add the `solr` user to the `apache` group (or `www-data`)\nAnd the other way around, add apache to solr.\n\nChange the ownership of the whole `YourCoreName` folder to `solr:solr`.\n\nChange the permissions on `YourCoreName/conf` to be `777`.\n\nThis should, in theory, resolve your permission errors.\n\nThese errors are _not_ related to this module, but on how Vagrant is set up on Linux.\n",
      "html": "<h1 id=\"known-issues\">Known issues <a class=\"heading-anchor-permalink\" href=\"#known-issues\">#</a></h1>\n<h2 id=\"database-errors\">Database errors <a class=\"heading-anchor-permalink\" href=\"#database-errors\">#</a></h2>\n<p>Did you do a build?</p>\n<p><code>https://yourdomain.com/dev/build?flush=all</code></p>\n<p>It is known that the final index might throw a MySQL error.\nThis is expected at the moment, and sadly, unavoidable so far.\nIf you have a solution, we would love to hear from you!</p>\n<h2 id=\"linux-hosts-with-vagrant\">Linux hosts with Vagrant <a class=\"heading-anchor-permalink\" href=\"#linux-hosts-with-vagrant\">#</a></h2>\n<p>There is a known issue between Linux hosts using Vagrant. Solr does not have\nthe correct write permissions, and Apache does not have the correct write permissions either.</p>\n<p>This can be resolved by setting the folder of your Solr Core to <code>/var/solr/data</code>.</p>\n<p>Then, create the following subfolders in the data folder:</p>\n<ul>\n<li><code>YourCoreName/conf</code></li>\n<li><code>YourCoreName/data</code></li>\n</ul>\n<p>Then, add the <code>solr</code> user to the <code>apache</code> group (or <code>www-data</code>)\nAnd the other way around, add apache to solr.</p>\n<p>Change the ownership of the whole <code>YourCoreName</code> folder to <code>solr:solr</code>.</p>\n<p>Change the permissions on <code>YourCoreName/conf</code> to be <code>777</code>.</p>\n<p>This should, in theory, resolve your permission errors.</p>\n<p>These errors are <em>not</em> related to this module, but on how Vagrant is set up on Linux.</p>\n",
      "id": 12
    }
  ]
}